// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MOD8PJ2Q
// DateTime: 25.06.2020 17:48:42
// UserName: przem
// Input file <Parser.y - 25.06.2020 17:48:20>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Comment=4,DoubleConv=5,IntConv=6,
    Write=7,Program=8,If=9,Else=10,While=11,Read=12,
    Int=13,Double=14,Bool=15,True=16,False=17,Return=18,
    And=19,BitAnd=20,Or=21,BitOr=22,Negation=23,BitNegation=24,
    Equal=25,NotEqual=26,GreaterOrEqual=27,SmallerOrEqual=28,Smaller=29,Greater=30,
    Assign=31,Plus=32,Minus=33,Multiply=34,Divide=35,OpenPar=36,
    ClosePar=37,OpenBracket=38,CloseBracket=39,Endl=40,Eof=41,Error=42,
    Ident=43,IntNumber=44,RealNumber=45,String=46,SemiCol=47};

public struct ValueType
#line 4 "Parser.y"
{
public string  val;
public int i_val;
public string  type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[100];
  private static State[] states = new State[179];
  private static string[] nonTerms = new string[] {
      "identPar", "maincandeclare", "main", "declare", "vtype", "assign", "exp", 
      "exp2", "exp3", "exp4", "exp5", "exp6", "logicop", "addop", "unary", "relatiop", 
      "mulop", "bitop", "term", "read", "while", "whilebody", "if", "start", 
      "$accept", "ifbody", "semicol", "expression", "write", "Anon@1", "Anon@2", 
      "Anon@3", "exp1", };

  static Parser() {
    states[0] = new State(new int[]{8,3},new int[]{-24,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{38,4});
    states[4] = new State(new int[]{13,14,14,15,15,16,12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-2,5,-4,8,-5,10,-3,17,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[5] = new State(new int[]{39,6});
    states[6] = new State(new int[]{41,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{13,14,14,15,15,16,12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-2,9,-4,8,-5,10,-3,17,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[9] = new State(-17);
    states[10] = new State(new int[]{43,11});
    states[11] = new State(new int[]{47,13},new int[]{-27,12});
    states[12] = new State(-42);
    states[13] = new State(-5);
    states[14] = new State(-43);
    states[15] = new State(-44);
    states[16] = new State(-45);
    states[17] = new State(-18);
    states[18] = new State(new int[]{12,24,7,31,47,13},new int[]{-28,19,-27,177,-20,23,-29,30});
    states[19] = new State(-21,new int[]{-30,20});
    states[20] = new State(new int[]{47,13},new int[]{-27,21});
    states[21] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,22,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[22] = new State(-22);
    states[23] = new State(-19);
    states[24] = new State(new int[]{43,26,36,27},new int[]{-1,25});
    states[25] = new State(-14);
    states[26] = new State(-12);
    states[27] = new State(new int[]{43,26,36,27},new int[]{-1,28});
    states[28] = new State(new int[]{37,29});
    states[29] = new State(-13);
    states[30] = new State(-20);
    states[31] = new State(new int[]{46,33,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,32,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[32] = new State(-15);
    states[33] = new State(-16);
    states[34] = new State(new int[]{21,120,19,121,47,-47,12,-47,7,-47,37,-47},new int[]{-13,35});
    states[35] = new State(new int[]{36,117,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-8,36,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97});
    states[36] = new State(new int[]{25,75,26,76,30,77,29,78,27,79,28,80,21,-49,19,-49,47,-49,12,-49,7,-49,37,-49},new int[]{-16,37});
    states[37] = new State(new int[]{36,114,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-9,38,-10,82,-11,83,-12,86,-15,87,-19,97});
    states[38] = new State(new int[]{32,53,33,54,25,-53,26,-53,30,-53,29,-53,27,-53,28,-53,21,-53,19,-53,47,-53,12,-53,7,-53,37,-53},new int[]{-14,39});
    states[39] = new State(new int[]{36,111,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-10,40,-11,83,-12,86,-15,87,-19,97});
    states[40] = new State(new int[]{34,60,35,61,32,-58,33,-58,25,-58,26,-58,30,-58,29,-58,27,-58,28,-58,21,-58,19,-58,47,-58,12,-58,7,-58,37,-58},new int[]{-17,41});
    states[41] = new State(new int[]{36,108,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-11,42,-12,86,-15,87,-19,97});
    states[42] = new State(new int[]{22,84,20,85,34,-63,35,-63,32,-63,33,-63,25,-63,26,-63,30,-63,29,-63,27,-63,28,-63,21,-63,19,-63,47,-63,12,-63,7,-63,37,-63},new int[]{-18,43});
    states[43] = new State(new int[]{36,45,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-12,44,-15,87,-19,97});
    states[44] = new State(-68);
    states[45] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,46,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[46] = new State(new int[]{37,47});
    states[47] = new State(-70);
    states[48] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,49,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[49] = new State(new int[]{37,50});
    states[50] = new State(new int[]{25,75,26,76,30,77,29,78,27,79,28,80,32,53,33,54,34,60,35,61,22,84,20,85,21,-51,19,-51,47,-51,12,-51,7,-51,37,-51},new int[]{-16,51,-14,58,-17,65,-18,69});
    states[51] = new State(new int[]{36,55,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-9,52,-10,82,-11,83,-12,86,-15,87,-19,97});
    states[52] = new State(new int[]{32,53,33,54,25,-54,26,-54,30,-54,29,-54,27,-54,28,-54,21,-54,19,-54,47,-54,12,-54,7,-54,37,-54},new int[]{-14,39});
    states[53] = new State(-81);
    states[54] = new State(-82);
    states[55] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,56,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[56] = new State(new int[]{37,57});
    states[57] = new State(new int[]{32,53,33,54,34,60,35,61,22,84,20,85,25,-55,26,-55,30,-55,29,-55,27,-55,28,-55,21,-55,19,-55,47,-55,12,-55,7,-55,37,-55},new int[]{-14,58,-17,65,-18,69});
    states[58] = new State(new int[]{36,62,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-10,59,-11,83,-12,86,-15,87,-19,97});
    states[59] = new State(new int[]{34,60,35,61,32,-59,33,-59,25,-59,26,-59,30,-59,29,-59,27,-59,28,-59,21,-59,19,-59,47,-59,12,-59,7,-59,37,-59},new int[]{-17,41});
    states[60] = new State(-83);
    states[61] = new State(-84);
    states[62] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,63,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[63] = new State(new int[]{37,64});
    states[64] = new State(new int[]{34,60,35,61,22,84,20,85,32,-61,33,-61,25,-61,26,-61,30,-61,29,-61,27,-61,28,-61,21,-61,19,-61,47,-61,12,-61,7,-61,37,-61},new int[]{-17,65,-18,69});
    states[65] = new State(new int[]{36,66,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-11,107,-12,86,-15,87,-19,97});
    states[66] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,67,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[67] = new State(new int[]{37,68});
    states[68] = new State(new int[]{22,84,20,85,34,-64,35,-64,32,-64,33,-64,25,-64,26,-64,30,-64,29,-64,27,-64,28,-64,21,-64,19,-64,47,-64,12,-64,7,-64,37,-64},new int[]{-18,69});
    states[69] = new State(new int[]{36,71,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-12,70,-15,87,-19,97});
    states[70] = new State(-69);
    states[71] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,72,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[72] = new State(new int[]{37,73});
    states[73] = new State(-71);
    states[74] = new State(new int[]{25,75,26,76,30,77,29,78,27,79,28,80,21,-52,19,-52,47,-52,12,-52,7,-52,37,-52},new int[]{-16,37});
    states[75] = new State(-94);
    states[76] = new State(-95);
    states[77] = new State(-96);
    states[78] = new State(-97);
    states[79] = new State(-98);
    states[80] = new State(-99);
    states[81] = new State(new int[]{32,53,33,54,25,-57,26,-57,30,-57,29,-57,27,-57,28,-57,21,-57,19,-57,47,-57,12,-57,7,-57,37,-57},new int[]{-14,39});
    states[82] = new State(new int[]{34,60,35,61,32,-62,33,-62,25,-62,26,-62,30,-62,29,-62,27,-62,28,-62,21,-62,19,-62,47,-62,12,-62,7,-62,37,-62},new int[]{-17,41});
    states[83] = new State(new int[]{22,84,20,85,34,-67,35,-67,32,-67,33,-67,25,-67,26,-67,30,-67,29,-67,27,-67,28,-67,21,-67,19,-67,47,-67,12,-67,7,-67,37,-67},new int[]{-18,43});
    states[84] = new State(-85);
    states[85] = new State(-86);
    states[86] = new State(-72);
    states[87] = new State(new int[]{36,89,33,92,24,93,23,94,6,95,5,96,43,106,45,101,44,102,16,103,17,104},new int[]{-12,88,-15,87,-19,97});
    states[88] = new State(-73);
    states[89] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,90,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[90] = new State(new int[]{37,91});
    states[91] = new State(-74);
    states[92] = new State(-87);
    states[93] = new State(-88);
    states[94] = new State(-89);
    states[95] = new State(-90);
    states[96] = new State(-91);
    states[97] = new State(-75);
    states[98] = new State(new int[]{31,99,22,-76,20,-76,34,-76,35,-76,32,-76,33,-76,25,-76,26,-76,30,-76,29,-76,27,-76,28,-76,21,-76,19,-76,47,-76,12,-76,7,-76,37,-76});
    states[99] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,100,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[100] = new State(-46);
    states[101] = new State(-77);
    states[102] = new State(-78);
    states[103] = new State(-79);
    states[104] = new State(-80);
    states[105] = new State(-48);
    states[106] = new State(-76);
    states[107] = new State(new int[]{22,84,20,85,34,-65,35,-65,32,-65,33,-65,25,-65,26,-65,30,-65,29,-65,27,-65,28,-65,21,-65,19,-65,47,-65,12,-65,7,-65,37,-65},new int[]{-18,43});
    states[108] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,109,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[109] = new State(new int[]{37,110});
    states[110] = new State(new int[]{22,84,20,85,34,-66,35,-66,32,-66,33,-66,25,-66,26,-66,30,-66,29,-66,27,-66,28,-66,21,-66,19,-66,47,-66,12,-66,7,-66,37,-66},new int[]{-18,69});
    states[111] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,112,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[112] = new State(new int[]{37,113});
    states[113] = new State(new int[]{34,60,35,61,22,84,20,85,32,-60,33,-60,25,-60,26,-60,30,-60,29,-60,27,-60,28,-60,21,-60,19,-60,47,-60,12,-60,7,-60,37,-60},new int[]{-17,65,-18,69});
    states[114] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,115,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[115] = new State(new int[]{37,116});
    states[116] = new State(new int[]{32,53,33,54,34,60,35,61,22,84,20,85,25,-56,26,-56,30,-56,29,-56,27,-56,28,-56,21,-56,19,-56,47,-56,12,-56,7,-56,37,-56},new int[]{-14,58,-17,65,-18,69});
    states[117] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,118,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[118] = new State(new int[]{37,119});
    states[119] = new State(new int[]{25,75,26,76,30,77,29,78,27,79,28,80,32,53,33,54,34,60,35,61,22,84,20,85,21,-50,19,-50,47,-50,12,-50,7,-50,37,-50},new int[]{-16,51,-14,58,-17,65,-18,69});
    states[120] = new State(-92);
    states[121] = new State(-93);
    states[122] = new State(new int[]{47,13},new int[]{-27,123});
    states[123] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,124,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[124] = new State(-24);
    states[125] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,126,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[126] = new State(-25);
    states[127] = new State(new int[]{36,128});
    states[128] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,129,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[129] = new State(new int[]{37,130});
    states[130] = new State(new int[]{38,131,12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,18,175},new int[]{-22,168,-28,169,-20,23,-29,30,-7,171,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,173,-23,174});
    states[131] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,132,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[132] = new State(new int[]{39,133});
    states[133] = new State(-35);
    states[134] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,135,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[135] = new State(-26);
    states[136] = new State(new int[]{36,137});
    states[137] = new State(new int[]{36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104},new int[]{-7,138,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105});
    states[138] = new State(new int[]{37,139});
    states[139] = new State(new int[]{38,143,12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,18,166},new int[]{-26,140,-28,160,-20,23,-29,30,-7,162,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,164,-23,165});
    states[140] = new State(new int[]{10,141,12,-3,7,-3,36,-3,33,-3,24,-3,23,-3,6,-3,5,-3,43,-3,45,-3,44,-3,16,-3,17,-3,11,-3,9,-3,2,-3,18,-3,38,-3,39,-3});
    states[141] = new State(new int[]{38,143,12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,18,166},new int[]{-26,142,-28,160,-20,23,-29,30,-7,162,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,164,-23,165});
    states[142] = new State(-4);
    states[143] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,144,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[144] = new State(new int[]{39,145});
    states[145] = new State(-6);
    states[146] = new State(new int[]{41,159,47,13,12,-29,7,-29,36,-29,33,-29,24,-29,23,-29,6,-29,5,-29,43,-29,45,-29,44,-29,16,-29,17,-29,11,-29,9,-29,2,-29,18,-29,38,-29,39,-29},new int[]{-27,147,-32,157});
    states[147] = new State(-27,new int[]{-31,148});
    states[148] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,149,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[149] = new State(-28);
    states[150] = new State(new int[]{47,13},new int[]{-27,151});
    states[151] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,152,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[152] = new State(-32);
    states[153] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,154,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[154] = new State(new int[]{39,155});
    states[155] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,156,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[156] = new State(-34);
    states[157] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,158,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[158] = new State(-30);
    states[159] = new State(-31);
    states[160] = new State(new int[]{47,13},new int[]{-27,161});
    states[161] = new State(-7);
    states[162] = new State(new int[]{47,13},new int[]{-27,163});
    states[163] = new State(-8);
    states[164] = new State(-9);
    states[165] = new State(-10);
    states[166] = new State(new int[]{47,13},new int[]{-27,167});
    states[167] = new State(-11);
    states[168] = new State(-36);
    states[169] = new State(new int[]{47,13},new int[]{-27,170});
    states[170] = new State(-37);
    states[171] = new State(new int[]{47,13},new int[]{-27,172});
    states[172] = new State(-38);
    states[173] = new State(-39);
    states[174] = new State(-40);
    states[175] = new State(new int[]{47,13},new int[]{-27,176});
    states[176] = new State(-41);
    states[177] = new State(new int[]{12,24,7,31,36,48,33,92,24,93,23,94,6,95,5,96,43,98,45,101,44,102,16,103,17,104,11,127,9,136,2,146,18,150,38,153,39,-33},new int[]{-3,178,-28,18,-20,23,-29,30,-7,122,-33,34,-8,74,-9,81,-10,82,-11,83,-12,86,-15,87,-19,97,-6,105,-21,125,-23,134});
    states[178] = new State(-23);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-25, new int[]{-24,3});
    rules[2] = new Rule(-24, new int[]{8,38,-2,39,41});
    rules[3] = new Rule(-23, new int[]{9,36,-7,37,-26});
    rules[4] = new Rule(-23, new int[]{9,36,-7,37,-26,10,-26});
    rules[5] = new Rule(-27, new int[]{47});
    rules[6] = new Rule(-26, new int[]{38,-3,39});
    rules[7] = new Rule(-26, new int[]{-28,-27});
    rules[8] = new Rule(-26, new int[]{-7,-27});
    rules[9] = new Rule(-26, new int[]{-21});
    rules[10] = new Rule(-26, new int[]{-23});
    rules[11] = new Rule(-26, new int[]{18,-27});
    rules[12] = new Rule(-1, new int[]{43});
    rules[13] = new Rule(-1, new int[]{36,-1,37});
    rules[14] = new Rule(-20, new int[]{12,-1});
    rules[15] = new Rule(-29, new int[]{7,-7});
    rules[16] = new Rule(-29, new int[]{7,46});
    rules[17] = new Rule(-2, new int[]{-4,-2});
    rules[18] = new Rule(-2, new int[]{-3});
    rules[19] = new Rule(-28, new int[]{-20});
    rules[20] = new Rule(-28, new int[]{-29});
    rules[21] = new Rule(-30, new int[]{});
    rules[22] = new Rule(-3, new int[]{-28,-28,-30,-27,-3});
    rules[23] = new Rule(-3, new int[]{-28,-27,-3});
    rules[24] = new Rule(-3, new int[]{-7,-27,-3});
    rules[25] = new Rule(-3, new int[]{-21,-3});
    rules[26] = new Rule(-3, new int[]{-23,-3});
    rules[27] = new Rule(-31, new int[]{});
    rules[28] = new Rule(-3, new int[]{2,-27,-31,-3});
    rules[29] = new Rule(-32, new int[]{});
    rules[30] = new Rule(-3, new int[]{2,-32,-3});
    rules[31] = new Rule(-3, new int[]{2,41});
    rules[32] = new Rule(-3, new int[]{18,-27,-3});
    rules[33] = new Rule(-3, new int[]{});
    rules[34] = new Rule(-3, new int[]{38,-3,39,-3});
    rules[35] = new Rule(-21, new int[]{11,36,-7,37,38,-3,39});
    rules[36] = new Rule(-21, new int[]{11,36,-7,37,-22});
    rules[37] = new Rule(-22, new int[]{-28,-27});
    rules[38] = new Rule(-22, new int[]{-7,-27});
    rules[39] = new Rule(-22, new int[]{-21});
    rules[40] = new Rule(-22, new int[]{-23});
    rules[41] = new Rule(-22, new int[]{18,-27});
    rules[42] = new Rule(-4, new int[]{-5,43,-27});
    rules[43] = new Rule(-5, new int[]{13});
    rules[44] = new Rule(-5, new int[]{14});
    rules[45] = new Rule(-5, new int[]{15});
    rules[46] = new Rule(-6, new int[]{43,31,-7});
    rules[47] = new Rule(-7, new int[]{-33});
    rules[48] = new Rule(-7, new int[]{-6});
    rules[49] = new Rule(-33, new int[]{-33,-13,-8});
    rules[50] = new Rule(-33, new int[]{-33,-13,36,-7,37});
    rules[51] = new Rule(-33, new int[]{36,-7,37});
    rules[52] = new Rule(-33, new int[]{-8});
    rules[53] = new Rule(-8, new int[]{-8,-16,-9});
    rules[54] = new Rule(-8, new int[]{36,-7,37,-16,-9});
    rules[55] = new Rule(-8, new int[]{36,-7,37,-16,36,-7,37});
    rules[56] = new Rule(-8, new int[]{-8,-16,36,-7,37});
    rules[57] = new Rule(-8, new int[]{-9});
    rules[58] = new Rule(-9, new int[]{-9,-14,-10});
    rules[59] = new Rule(-9, new int[]{36,-7,37,-14,-10});
    rules[60] = new Rule(-9, new int[]{-9,-14,36,-7,37});
    rules[61] = new Rule(-9, new int[]{36,-7,37,-14,36,-7,37});
    rules[62] = new Rule(-9, new int[]{-10});
    rules[63] = new Rule(-10, new int[]{-10,-17,-11});
    rules[64] = new Rule(-10, new int[]{36,-7,37,-17,36,-7,37});
    rules[65] = new Rule(-10, new int[]{36,-7,37,-17,-11});
    rules[66] = new Rule(-10, new int[]{-10,-17,36,-7,37});
    rules[67] = new Rule(-10, new int[]{-11});
    rules[68] = new Rule(-11, new int[]{-11,-18,-12});
    rules[69] = new Rule(-11, new int[]{36,-7,37,-18,-12});
    rules[70] = new Rule(-11, new int[]{-11,-18,36,-7,37});
    rules[71] = new Rule(-11, new int[]{36,-7,37,-18,36,-7,37});
    rules[72] = new Rule(-11, new int[]{-12});
    rules[73] = new Rule(-12, new int[]{-15,-12});
    rules[74] = new Rule(-12, new int[]{-15,36,-7,37});
    rules[75] = new Rule(-12, new int[]{-19});
    rules[76] = new Rule(-19, new int[]{43});
    rules[77] = new Rule(-19, new int[]{45});
    rules[78] = new Rule(-19, new int[]{44});
    rules[79] = new Rule(-19, new int[]{16});
    rules[80] = new Rule(-19, new int[]{17});
    rules[81] = new Rule(-14, new int[]{32});
    rules[82] = new Rule(-14, new int[]{33});
    rules[83] = new Rule(-17, new int[]{34});
    rules[84] = new Rule(-17, new int[]{35});
    rules[85] = new Rule(-18, new int[]{22});
    rules[86] = new Rule(-18, new int[]{20});
    rules[87] = new Rule(-15, new int[]{33});
    rules[88] = new Rule(-15, new int[]{24});
    rules[89] = new Rule(-15, new int[]{23});
    rules[90] = new Rule(-15, new int[]{6});
    rules[91] = new Rule(-15, new int[]{5});
    rules[92] = new Rule(-13, new int[]{21});
    rules[93] = new Rule(-13, new int[]{19});
    rules[94] = new Rule(-16, new int[]{25});
    rules[95] = new Rule(-16, new int[]{26});
    rules[96] = new Rule(-16, new int[]{30});
    rules[97] = new Rule(-16, new int[]{29});
    rules[98] = new Rule(-16, new int[]{27});
    rules[99] = new Rule(-16, new int[]{28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, OpenBracket, maincandeclare, CloseBracket, Eof
#line 17 "Parser.y"
                                                            { Compiler.tree = Compiler.stackTree.Pop();}
#line default
        break;
      case 3: // if -> If, OpenPar, exp, ClosePar, ifbody
#line 20 "Parser.y"
                                    { var nodeI = new IfNode();
					nodeI.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeI.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeI.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 4: // if -> If, OpenPar, exp, ClosePar, ifbody, Else, ifbody
#line 25 "Parser.y"
                                               { var nodeI =new IfElseNode();
					nodeI.line=Compiler.line; 
					if(Compiler.stackTree.Count>0) nodeI.elseNode = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeI.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeI.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 5: // semicol -> SemiCol
#line 32 "Parser.y"
                  {
					Compiler.line=ValueStack[ValueStack.Depth-1].i_val;}
#line default
        break;
      case 11: // ifbody -> Return, semicol
#line 40 "Parser.y"
                  { var nodeM = new ReturnNode();
		nodeM.line=Compiler.line; 
		 Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 12: // identPar -> Ident
#line 44 "Parser.y"
                {CurrentSemanticValue.type=ValueStack[ValueStack.Depth-1].val;}
#line default
        break;
      case 13: // identPar -> OpenPar, identPar, ClosePar
#line 45 "Parser.y"
                             {CurrentSemanticValue.type =ValueStack[ValueStack.Depth-2].type;}
#line default
        break;
      case 14: // read -> Read, identPar
#line 46 "Parser.y"
                    { 
					var nodeR = new ReadNode();
					nodeR.value=ValueStack[ValueStack.Depth-1].type;
				    Compiler.stackTree.Push(nodeR);}
#line default
        break;
      case 15: // write -> Write, exp
#line 50 "Parser.y"
                { var nodeW = new WriteNode();
					nodeW.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 16: // write -> Write, String
#line 55 "Parser.y"
                {
					var nodeS = new StringNode();
					nodeS.line=Compiler.line;
					nodeS.value = ValueStack[ValueStack.Depth-1].val;
					var nodeW = new WriteNode();
					nodeW.right=nodeS;
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 17: // maincandeclare -> declare, maincandeclare
#line 64 "Parser.y"
     {  
				    var nodeM = new MainNode();
					nodeM.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 18: // maincandeclare -> main
#line 71 "Parser.y"
        {}
#line default
        break;
      case 21: // Anon@1 -> /* empty */
#line 77 "Parser.y"
                            {Console.WriteLine("Syntax error");  ++Compiler.errors;
               yyerrok();
                }
#line default
        break;
      case 23: // main -> expression, semicol, main
#line 81 "Parser.y"
    {  
				    var nodeM = new MainNode();
					nodeM.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 24: // main -> exp, semicol, main
#line 88 "Parser.y"
                    {  
				    var nodeM = new MainNode();
					nodeM.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 25: // main -> while, main
#line 95 "Parser.y"
              {  
				    var nodeM = new MainNode();
					nodeM.line=Compiler.line; 
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 26: // main -> if, main
#line 102 "Parser.y"
            {  
				    var nodeM = new MainNode();
					nodeM.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 27: // Anon@2 -> /* empty */
#line 109 "Parser.y"
                  {Console.WriteLine("Error while parsing (syntax or lexical error): in line {0} ", ValueStack[ValueStack.Depth-2].i_val);   ++Compiler.errors;
      yyerrok();
	              }
#line default
        break;
      case 29: // Anon@3 -> /* empty */
#line 112 "Parser.y"
         {Console.WriteLine("Error while parsing (syntax or lexical error)");   ++Compiler.errors;
        yyerrok();
              }
#line default
        break;
      case 31: // main -> error, Eof
#line 115 "Parser.y"
             {Console.WriteLine("Unexpected end of file");  ++Compiler.errors; YYAbort();}
#line default
        break;
      case 32: // main -> Return, semicol, main
#line 116 "Parser.y"
                       { var nodeR = new ReturnNode();
					nodeR.line=Compiler.line;
					Compiler.stackTree.Push(nodeR);
					var nodeM = new MainNode();
					nodeM.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 33: // main -> /* empty */
#line 124 "Parser.y"
    { var nodeM = new MainNode();
		 nodeM.line=Compiler.line;
		 Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 35: // while -> While, OpenPar, exp, ClosePar, OpenBracket, main, CloseBracket
#line 130 "Parser.y"
                                                                {var nodeW = new WhileNode();
					nodeW.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeW.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 36: // while -> While, OpenPar, exp, ClosePar, whilebody
#line 136 "Parser.y"
                                         {var nodeW = new WhileNode();
					nodeW.line=Compiler.line;
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeW.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 41: // whilebody -> Return, semicol
#line 147 "Parser.y"
                  { var nodeM = new ReturnNode();
		 Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 42: // declare -> vtype, Ident, semicol
#line 150 "Parser.y"
                              {var node = new DeclarationNode(); 
						  node.line=Compiler.line;
						  node.varType=ValueStack[ValueStack.Depth-3].type; node.ident=ValueStack[ValueStack.Depth-2].val;
						  if(Compiler.variables.ContainsKey(ValueStack[ValueStack.Depth-2].val)) 
						  {	
							string s=ValueStack[ValueStack.Depth-2].val;
							Console.WriteLine("Semantic error. Variable {0} already declared. Error in line {1}",s,Compiler.line);
							++Compiler.errors;
						  }
						  else
							 Compiler.variables.Add(ValueStack[ValueStack.Depth-2].val,ValueStack[ValueStack.Depth-3].type);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 43: // vtype -> Int
#line 163 "Parser.y"
           {CurrentSemanticValue.type="int";}
#line default
        break;
      case 44: // vtype -> Double
#line 164 "Parser.y"
          {CurrentSemanticValue.type="double";}
#line default
        break;
      case 45: // vtype -> Bool
#line 165 "Parser.y"
        {CurrentSemanticValue.type = "bool";}
#line default
        break;
      case 46: // assign -> Ident, Assign, exp
#line 167 "Parser.y"
                          {var node = new AssignNode(); 
						   node.line=Compiler.line;
						   node.ident=ValueStack[ValueStack.Depth-3].val;
						   	if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 49: // exp1 -> exp1, logicop, exp2
#line 176 "Parser.y"
                         {var node = new LogicNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 50: // exp1 -> exp1, logicop, OpenPar, exp, ClosePar
#line 182 "Parser.y"
                                      {var node = new LogicNode(); 
					node.line=Compiler.line;
					 if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 53: // exp2 -> exp2, relatiop, exp3
#line 192 "Parser.y"
  {
		 var node = new RelationNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 54: // exp2 -> OpenPar, exp, ClosePar, relatiop, exp3
#line 200 "Parser.y"
   {var node = new RelationNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 55: // exp2 -> OpenPar, exp, ClosePar, relatiop, OpenPar, exp, ClosePar
#line 207 "Parser.y"
   {var node = new RelationNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 56: // exp2 -> exp2, relatiop, OpenPar, exp, ClosePar
#line 214 "Parser.y"
   {var node = new RelationNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 58: // exp3 -> exp3, addop, exp4
#line 222 "Parser.y"
                      {var node = new AddNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 59: // exp3 -> OpenPar, exp, ClosePar, addop, exp4
#line 228 "Parser.y"
                                   {var node = new AddNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 60: // exp3 -> exp3, addop, OpenPar, exp, ClosePar
#line 234 "Parser.y"
                                   {var node = new AddNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 61: // exp3 -> OpenPar, exp, ClosePar, addop, OpenPar, exp, ClosePar
#line 241 "Parser.y"
     {var node = new AddNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 63: // exp4 -> exp4, mulop, exp5
#line 249 "Parser.y"
                       {var node = new MulNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 64: // exp4 -> OpenPar, exp, ClosePar, mulop, OpenPar, exp, ClosePar
#line 255 "Parser.y"
                                                    {var node = new MulNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 65: // exp4 -> OpenPar, exp, ClosePar, mulop, exp5
#line 261 "Parser.y"
                                    {var node = new MulNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 66: // exp4 -> exp4, mulop, OpenPar, exp, ClosePar
#line 267 "Parser.y"
                                    {var node = new MulNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 68: // exp5 -> exp5, bitop, exp6
#line 275 "Parser.y"
                       {var node = new BitNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 69: // exp5 -> OpenPar, exp, ClosePar, bitop, exp6
#line 281 "Parser.y"
                                     {var node = new BitNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 70: // exp5 -> exp5, bitop, OpenPar, exp, ClosePar
#line 287 "Parser.y"
                                      {var node = new BitNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 71: // exp5 -> OpenPar, exp, ClosePar, bitop, OpenPar, exp, ClosePar
#line 293 "Parser.y"
                                                      {var node = new BitNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 73: // exp6 -> unary, exp6
#line 301 "Parser.y"
                   {var node = new UnaryNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					node.type=ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 74: // exp6 -> unary, OpenPar, exp, ClosePar
#line 306 "Parser.y"
                              {var node = new UnaryNode(); 
					node.line=Compiler.line;
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					node.type=ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 76: // term -> Ident
#line 313 "Parser.y"
            {var node = new IdentNode();
			node.line=Compiler.line;
			node.ident = ValueStack[ValueStack.Depth-1].val;
			Compiler.stackTree.Push(node);}
#line default
        break;
      case 77: // term -> RealNumber
#line 317 "Parser.y"
              {var node = new DoubleNode();	
					node.line=Compiler.line;
					node.value=Double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 78: // term -> IntNumber
#line 321 "Parser.y"
             {var node = new IntNode();
					node.line=Compiler.line;
					node.value=Int32.Parse(ValueStack[ValueStack.Depth-1].val);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 79: // term -> True
#line 325 "Parser.y"
        {var node = new BoolNode();
					node.line=Compiler.line;
					node.value=true;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 80: // term -> False
#line 329 "Parser.y"
         {var node = new BoolNode();
					node.line=Compiler.line;
					node.value=false;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 81: // addop -> Plus
#line 334 "Parser.y"
             {CurrentSemanticValue.type="+";}
#line default
        break;
      case 82: // addop -> Minus
#line 335 "Parser.y"
          {CurrentSemanticValue.type="-";}
#line default
        break;
      case 83: // mulop -> Multiply
#line 337 "Parser.y"
                 {CurrentSemanticValue.type="*";}
#line default
        break;
      case 84: // mulop -> Divide
#line 339 "Parser.y"
          {CurrentSemanticValue.type="/";}
#line default
        break;
      case 85: // bitop -> BitOr
#line 340 "Parser.y"
             {CurrentSemanticValue.type="||";}
#line default
        break;
      case 86: // bitop -> BitAnd
#line 341 "Parser.y"
            {CurrentSemanticValue.type="&&";}
#line default
        break;
      case 87: // unary -> Minus
#line 343 "Parser.y"
              {CurrentSemanticValue.type="-";}
#line default
        break;
      case 88: // unary -> BitNegation
#line 344 "Parser.y"
                {CurrentSemanticValue.type="~";}
#line default
        break;
      case 89: // unary -> Negation
#line 345 "Parser.y"
             {CurrentSemanticValue.type="!";}
#line default
        break;
      case 90: // unary -> IntConv
#line 346 "Parser.y"
            {CurrentSemanticValue.type="(int)";}
#line default
        break;
      case 91: // unary -> DoubleConv
#line 347 "Parser.y"
               {CurrentSemanticValue.type="(double)";}
#line default
        break;
      case 92: // logicop -> Or
#line 349 "Parser.y"
             {CurrentSemanticValue.type="||";}
#line default
        break;
      case 93: // logicop -> And
#line 350 "Parser.y"
        {CurrentSemanticValue.type="&&";}
#line default
        break;
      case 94: // relatiop -> Equal
#line 352 "Parser.y"
                 {CurrentSemanticValue.type="==";}
#line default
        break;
      case 95: // relatiop -> NotEqual
#line 353 "Parser.y"
             {CurrentSemanticValue.type="!=";}
#line default
        break;
      case 96: // relatiop -> Greater
#line 354 "Parser.y"
           {CurrentSemanticValue.type=">";}
#line default
        break;
      case 97: // relatiop -> Smaller
#line 355 "Parser.y"
            {CurrentSemanticValue.type="<";}
#line default
        break;
      case 98: // relatiop -> GreaterOrEqual
#line 356 "Parser.y"
                  {CurrentSemanticValue.type=">=";}
#line default
        break;
      case 99: // relatiop -> SmallerOrEqual
#line 357 "Parser.y"
                   {CurrentSemanticValue.type="<=";}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 361 "Parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
