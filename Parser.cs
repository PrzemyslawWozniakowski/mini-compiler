// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MOD8PJ2Q
// DateTime: 10.06.2020 01:15:51
// UserName: przem
// Input file <Parser.y - 10.06.2020 01:15:47>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Comment=4,String=5,DoubleConv=6,
    IntConv=7,Write=8,Program=9,If=10,Else=11,While=12,
    Read=13,Int=14,Double=15,Bool=16,True=17,False=18,
    Return=19,And=20,BitAnd=21,Or=22,BitOr=23,Negation=24,
    BitNegation=25,Equal=26,NotEqual=27,GreaterOrEqual=28,SmallerOrEqual=29,Smaller=30,
    Greater=31,Assign=32,Plus=33,Minus=34,Multiply=35,Divide=36,
    OpenPar=37,ClosePar=38,SemiCol=39,OpenBracket=40,CloseBracket=41,Endl=42,
    Eof=43,Error=44,Ident=45,IntNumber=46,RealNumber=47};

public struct ValueType
#line 4 "Parser.y"
{
public string  val;
public int i_val;
public double  d_val;
public string  type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[41];
  private static State[] states = new State[57];
  private static string[] nonTerms = new string[] {
      "main", "declare", "vtype", "assign", "exp", "exp2", "exp3", "exp4", "exp5", 
      "exp6", "logicop", "addop", "unary", "relatiop", "mulop", "bitop", "start", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{9,3},new int[]{-17,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{40,4});
    states[4] = new State(new int[]{14,12,15,13,45,16,41,-5},new int[]{-1,5,-2,7,-3,9,-4,14});
    states[5] = new State(new int[]{41,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{14,12,15,13,45,16,41,-5},new int[]{-1,8,-2,7,-3,9,-4,14});
    states[8] = new State(-3);
    states[9] = new State(new int[]{45,10});
    states[10] = new State(new int[]{39,11});
    states[11] = new State(-6);
    states[12] = new State(-7);
    states[13] = new State(-8);
    states[14] = new State(new int[]{14,12,15,13,45,16,41,-5},new int[]{-1,15,-2,7,-3,9,-4,14});
    states[15] = new State(-4);
    states[16] = new State(new int[]{32,17});
    states[17] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-5,18,-6,20,-7,23,-8,26,-9,29,-10,32,-13,35});
    states[18] = new State(new int[]{39,19});
    states[19] = new State(-9);
    states[20] = new State(new int[]{22,55,20,56,39,-11},new int[]{-11,21});
    states[21] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-5,22,-6,20,-7,23,-8,26,-9,29,-10,32,-13,35});
    states[22] = new State(-10);
    states[23] = new State(new int[]{26,49,27,50,31,51,30,52,28,53,29,54,22,-13,20,-13,39,-13},new int[]{-14,24});
    states[24] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-6,25,-7,23,-8,26,-9,29,-10,32,-13,35});
    states[25] = new State(-12);
    states[26] = new State(new int[]{33,47,34,48,26,-15,27,-15,31,-15,30,-15,28,-15,29,-15,22,-15,20,-15,39,-15},new int[]{-12,27});
    states[27] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-7,28,-8,26,-9,29,-10,32,-13,35});
    states[28] = new State(-14);
    states[29] = new State(new int[]{35,45,36,46,33,-17,34,-17,26,-17,27,-17,31,-17,30,-17,28,-17,29,-17,22,-17,20,-17,39,-17},new int[]{-15,30});
    states[30] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-8,31,-9,29,-10,32,-13,35});
    states[31] = new State(-16);
    states[32] = new State(new int[]{23,43,21,44,35,-19,36,-19,33,-19,34,-19,26,-19,27,-19,31,-19,30,-19,28,-19,29,-19,22,-19,20,-19,39,-19},new int[]{-16,33});
    states[33] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-9,34,-10,32,-13,35});
    states[34] = new State(-18);
    states[35] = new State(new int[]{34,37,25,38,24,39,7,40,6,41,45,42},new int[]{-10,36,-13,35});
    states[36] = new State(-20);
    states[37] = new State(-28);
    states[38] = new State(-29);
    states[39] = new State(-30);
    states[40] = new State(-31);
    states[41] = new State(-32);
    states[42] = new State(-21);
    states[43] = new State(-26);
    states[44] = new State(-27);
    states[45] = new State(-24);
    states[46] = new State(-25);
    states[47] = new State(-22);
    states[48] = new State(-23);
    states[49] = new State(-35);
    states[50] = new State(-36);
    states[51] = new State(-37);
    states[52] = new State(-38);
    states[53] = new State(-39);
    states[54] = new State(-40);
    states[55] = new State(-33);
    states[56] = new State(-34);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-18, new int[]{-17,3});
    rules[2] = new Rule(-17, new int[]{9,40,-1,41});
    rules[3] = new Rule(-1, new int[]{-2,-1});
    rules[4] = new Rule(-1, new int[]{-4,-1});
    rules[5] = new Rule(-1, new int[]{});
    rules[6] = new Rule(-2, new int[]{-3,45,39});
    rules[7] = new Rule(-3, new int[]{14});
    rules[8] = new Rule(-3, new int[]{15});
    rules[9] = new Rule(-4, new int[]{45,32,-5,39});
    rules[10] = new Rule(-5, new int[]{-6,-11,-5});
    rules[11] = new Rule(-5, new int[]{-6});
    rules[12] = new Rule(-6, new int[]{-7,-14,-6});
    rules[13] = new Rule(-6, new int[]{-7});
    rules[14] = new Rule(-7, new int[]{-8,-12,-7});
    rules[15] = new Rule(-7, new int[]{-8});
    rules[16] = new Rule(-8, new int[]{-9,-15,-8});
    rules[17] = new Rule(-8, new int[]{-9});
    rules[18] = new Rule(-9, new int[]{-10,-16,-9});
    rules[19] = new Rule(-9, new int[]{-10});
    rules[20] = new Rule(-10, new int[]{-13,-10});
    rules[21] = new Rule(-10, new int[]{45});
    rules[22] = new Rule(-12, new int[]{33});
    rules[23] = new Rule(-12, new int[]{34});
    rules[24] = new Rule(-15, new int[]{35});
    rules[25] = new Rule(-15, new int[]{36});
    rules[26] = new Rule(-16, new int[]{23});
    rules[27] = new Rule(-16, new int[]{21});
    rules[28] = new Rule(-13, new int[]{34});
    rules[29] = new Rule(-13, new int[]{25});
    rules[30] = new Rule(-13, new int[]{24});
    rules[31] = new Rule(-13, new int[]{7});
    rules[32] = new Rule(-13, new int[]{6});
    rules[33] = new Rule(-11, new int[]{22});
    rules[34] = new Rule(-11, new int[]{20});
    rules[35] = new Rule(-14, new int[]{26});
    rules[36] = new Rule(-14, new int[]{27});
    rules[37] = new Rule(-14, new int[]{31});
    rules[38] = new Rule(-14, new int[]{30});
    rules[39] = new Rule(-14, new int[]{28});
    rules[40] = new Rule(-14, new int[]{29});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, OpenBracket, main, CloseBracket
#line 18 "Parser.y"
                                              {Console.WriteLine("It's a program PogChamp");}
#line default
        break;
      case 6: // declare -> vtype, Ident, SemiCol
#line 24 "Parser.y"
                              {Console.WriteLine("It's a declaration");}
#line default
        break;
      case 9: // assign -> Ident, Assign, exp, SemiCol
#line 29 "Parser.y"
                                 {Console.WriteLine("It's an assignment");}
#line default
        break;
      case 10: // exp -> exp2, logicop, exp
#line 32 "Parser.y"
                       {Console.WriteLine("Logicop");}
#line default
        break;
      case 12: // exp2 -> exp3, relatiop, exp2
#line 35 "Parser.y"
                          {Console.WriteLine("Relatiop");}
#line default
        break;
      case 14: // exp3 -> exp4, addop, exp3
#line 38 "Parser.y"
                       {Console.WriteLine("Addop");}
#line default
        break;
      case 16: // exp4 -> exp5, mulop, exp4
#line 41 "Parser.y"
                       {Console.WriteLine("Mulop");}
#line default
        break;
      case 18: // exp5 -> exp6, bitop, exp5
#line 44 "Parser.y"
                       {Console.WriteLine("Bitop");}
#line default
        break;
      case 20: // exp6 -> unary, exp6
#line 47 "Parser.y"
                  {Console.WriteLine("Unary op");}
#line default
        break;
      case 21: // exp6 -> Ident
#line 48 "Parser.y"
          {//Console.WriteLine("Ident");
	}
#line default
        break;
      case 22: // addop -> Plus
#line 51 "Parser.y"
             {//Console.WriteLine("Adding");
	}
#line default
        break;
      case 23: // addop -> Minus
#line 53 "Parser.y"
          {//Console.WriteLine("Minus");
	}
#line default
        break;
      case 24: // mulop -> Multiply
#line 56 "Parser.y"
                 {//Console.WriteLine("Multiply");
	}
#line default
        break;
      case 26: // bitop -> BitOr
#line 60 "Parser.y"
             {//Console.WriteLine("Bit Or");
	}
#line default
        break;
      case 27: // bitop -> BitAnd
#line 62 "Parser.y"
           {//Console.WriteLine("Bit And");
	}
#line default
        break;
      case 28: // unary -> Minus
#line 65 "Parser.y"
              {//Console.WriteLine("Unary minus");
	}
#line default
        break;
      case 29: // unary -> BitNegation
#line 67 "Parser.y"
                {//Console.WriteLine("unary bit negation");
	}
#line default
        break;
      case 30: // unary -> Negation
#line 69 "Parser.y"
             {//Console.WriteLine("unary negation");
	}
#line default
        break;
      case 31: // unary -> IntConv
#line 71 "Parser.y"
            {//Console.WriteLine("conv to int");
	}
#line default
        break;
      case 32: // unary -> DoubleConv
#line 73 "Parser.y"
               {//Console.WriteLine("conv to bool");
	}
#line default
        break;
      case 33: // logicop -> Or
#line 76 "Parser.y"
            {//Console.WriteLine("Or");
	}
#line default
        break;
      case 34: // logicop -> And
#line 78 "Parser.y"
       {//Console.WriteLine("And");
	}
#line default
        break;
      case 35: // relatiop -> Equal
#line 81 "Parser.y"
                {//Console.WriteLine("Equal");
	}
#line default
        break;
      case 36: // relatiop -> NotEqual
#line 83 "Parser.y"
            {//Console.WriteLine("NotEqual");
	}
#line default
        break;
      case 37: // relatiop -> Greater
#line 85 "Parser.y"
           {//Console.WriteLine("Greater");
	}
#line default
        break;
      case 38: // relatiop -> Smaller
#line 87 "Parser.y"
           {//Console.WriteLine("Smaller");
	}
#line default
        break;
      case 39: // relatiop -> GreaterOrEqual
#line 89 "Parser.y"
                  {//Console.WriteLine("GreaterOrEqual");
	}
#line default
        break;
      case 40: // relatiop -> SmallerOrEqual
#line 91 "Parser.y"
                  {//Console.WriteLine("SmallerOrEqual");
	}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 96 "Parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
