// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MOD8PJ2Q
// DateTime: 29.06.2020 20:02:22
// UserName: przem
// Input file <C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y - 29.06.2020 19:55:42>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Comment=4,DoubleConv=5,IntConv=6,
    Write=7,Program=8,If=9,Else=10,While=11,Read=12,
    Int=13,Double=14,Bool=15,True=16,False=17,Return=18,
    And=19,BitAnd=20,Or=21,BitOr=22,Negation=23,BitNegation=24,
    Equal=25,NotEqual=26,GreaterOrEqual=27,SmallerOrEqual=28,Smaller=29,Greater=30,
    Assign=31,Plus=32,Minus=33,Multiply=34,Divide=35,OpenPar=36,
    ClosePar=37,OpenBracket=38,CloseBracket=39,Endl=40,Eof=41,Error=42,
    Ident=43,IntNumber=44,RealNumber=45,String=46,SemiCol=47};

public struct ValueType
#line 4 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
{
public string  val;
public int i_val;
public string  type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[108];
  private static State[] states = new State[195];
  private static string[] nonTerms = new string[] {
      "identPar", "maincandeclare", "main", "declare", "vtype", "assign", "exp", 
      "exp2", "exp3", "exp4", "exp5", "exp6", "logicop", "addop", "unary", "relatiop", 
      "mulop", "bitop", "term", "read", "while", "whilebody", "if", "semicol", 
      "start", "$accept", "Anon@1", "ifbody", "write", "expression", "Anon@2", 
      "exp1", "Anon@3", "Anon@4", "assignMid", };

  static Parser() {
    states[0] = new State(new int[]{8,3,2,192},new int[]{-25,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{38,4,41,191});
    states[4] = new State(new int[]{13,14,14,15,15,16,12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-2,5,-4,8,-5,10,-3,17,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[5] = new State(new int[]{39,6});
    states[6] = new State(new int[]{41,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{13,14,14,15,15,16,12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-2,9,-4,8,-5,10,-3,17,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[9] = new State(-14);
    states[10] = new State(new int[]{43,11});
    states[11] = new State(new int[]{47,13},new int[]{-24,12});
    states[12] = new State(-49);
    states[13] = new State(-8);
    states[14] = new State(-50);
    states[15] = new State(-51);
    states[16] = new State(-52);
    states[17] = new State(-15);
    states[18] = new State(new int[]{12,24,7,31,47,13},new int[]{-30,19,-24,189,-20,23,-29,30});
    states[19] = new State(-18,new int[]{-31,20});
    states[20] = new State(new int[]{47,13},new int[]{-24,21});
    states[21] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,22,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[22] = new State(-19);
    states[23] = new State(-16);
    states[24] = new State(new int[]{43,26,36,27},new int[]{-1,25});
    states[25] = new State(-11);
    states[26] = new State(-9);
    states[27] = new State(new int[]{43,26,36,27},new int[]{-1,28});
    states[28] = new State(new int[]{37,29});
    states[29] = new State(-10);
    states[30] = new State(-17);
    states[31] = new State(new int[]{46,33,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,32,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[32] = new State(-12);
    states[33] = new State(-13);
    states[34] = new State(new int[]{21,122,19,123,12,-55,7,-55,47,-55,37,-55},new int[]{-13,35});
    states[35] = new State(new int[]{36,119,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-8,36,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99});
    states[36] = new State(new int[]{25,79,26,80,30,81,29,82,27,83,28,84,47,-57,21,-57,19,-57,12,-57,7,-57,37,-57},new int[]{-16,37});
    states[37] = new State(new int[]{36,116,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-9,38,-10,86,-11,87,-12,90,-15,91,-19,99});
    states[38] = new State(new int[]{32,57,33,58,25,-61,26,-61,30,-61,29,-61,27,-61,28,-61,47,-61,21,-61,19,-61,12,-61,7,-61,37,-61},new int[]{-14,39});
    states[39] = new State(new int[]{36,113,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-10,40,-11,87,-12,90,-15,91,-19,99});
    states[40] = new State(new int[]{34,64,35,65,32,-66,33,-66,25,-66,26,-66,30,-66,29,-66,27,-66,28,-66,47,-66,21,-66,19,-66,12,-66,7,-66,37,-66},new int[]{-17,41});
    states[41] = new State(new int[]{36,110,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-11,42,-12,90,-15,91,-19,99});
    states[42] = new State(new int[]{22,88,20,89,34,-71,35,-71,32,-71,33,-71,25,-71,26,-71,30,-71,29,-71,27,-71,28,-71,47,-71,21,-71,19,-71,12,-71,7,-71,37,-71},new int[]{-18,43});
    states[43] = new State(new int[]{36,45,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-12,44,-15,91,-19,99});
    states[44] = new State(-76);
    states[45] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,46,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[46] = new State(new int[]{37,47});
    states[47] = new State(-78);
    states[48] = new State(new int[]{37,49});
    states[49] = new State(-98);
    states[50] = new State(new int[]{37,51});
    states[51] = new State(-99);
    states[52] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,53,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[53] = new State(new int[]{37,54});
    states[54] = new State(new int[]{25,79,26,80,30,81,29,82,27,83,28,84,32,57,33,58,34,64,35,65,22,88,20,89,47,-59,21,-59,19,-59,12,-59,7,-59,37,-59},new int[]{-16,55,-14,62,-17,69,-18,73});
    states[55] = new State(new int[]{36,59,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-9,56,-10,86,-11,87,-12,90,-15,91,-19,99});
    states[56] = new State(new int[]{32,57,33,58,25,-62,26,-62,30,-62,29,-62,27,-62,28,-62,47,-62,21,-62,19,-62,12,-62,7,-62,37,-62},new int[]{-14,39});
    states[57] = new State(-89);
    states[58] = new State(-90);
    states[59] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,60,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[60] = new State(new int[]{37,61});
    states[61] = new State(new int[]{32,57,33,58,34,64,35,65,22,88,20,89,25,-63,26,-63,30,-63,29,-63,27,-63,28,-63,47,-63,21,-63,19,-63,12,-63,7,-63,37,-63},new int[]{-14,62,-17,69,-18,73});
    states[62] = new State(new int[]{36,66,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-10,63,-11,87,-12,90,-15,91,-19,99});
    states[63] = new State(new int[]{34,64,35,65,32,-67,33,-67,25,-67,26,-67,30,-67,29,-67,27,-67,28,-67,47,-67,21,-67,19,-67,12,-67,7,-67,37,-67},new int[]{-17,41});
    states[64] = new State(-91);
    states[65] = new State(-92);
    states[66] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,67,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[67] = new State(new int[]{37,68});
    states[68] = new State(new int[]{34,64,35,65,22,88,20,89,32,-69,33,-69,25,-69,26,-69,30,-69,29,-69,27,-69,28,-69,47,-69,21,-69,19,-69,12,-69,7,-69,37,-69},new int[]{-17,69,-18,73});
    states[69] = new State(new int[]{36,70,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-11,109,-12,90,-15,91,-19,99});
    states[70] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,71,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[71] = new State(new int[]{37,72});
    states[72] = new State(new int[]{22,88,20,89,34,-72,35,-72,32,-72,33,-72,25,-72,26,-72,30,-72,29,-72,27,-72,28,-72,47,-72,21,-72,19,-72,12,-72,7,-72,37,-72},new int[]{-18,73});
    states[73] = new State(new int[]{36,75,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-12,74,-15,91,-19,99});
    states[74] = new State(-77);
    states[75] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,76,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[76] = new State(new int[]{37,77});
    states[77] = new State(-79);
    states[78] = new State(new int[]{25,79,26,80,30,81,29,82,27,83,28,84,47,-60,21,-60,19,-60,12,-60,7,-60,37,-60},new int[]{-16,37});
    states[79] = new State(-102);
    states[80] = new State(-103);
    states[81] = new State(-104);
    states[82] = new State(-105);
    states[83] = new State(-106);
    states[84] = new State(-107);
    states[85] = new State(new int[]{32,57,33,58,25,-65,26,-65,30,-65,29,-65,27,-65,28,-65,47,-65,21,-65,19,-65,12,-65,7,-65,37,-65},new int[]{-14,39});
    states[86] = new State(new int[]{34,64,35,65,32,-70,33,-70,25,-70,26,-70,30,-70,29,-70,27,-70,28,-70,47,-70,21,-70,19,-70,12,-70,7,-70,37,-70},new int[]{-17,41});
    states[87] = new State(new int[]{22,88,20,89,34,-75,35,-75,32,-75,33,-75,25,-75,26,-75,30,-75,29,-75,27,-75,28,-75,47,-75,21,-75,19,-75,12,-75,7,-75,37,-75},new int[]{-18,43});
    states[88] = new State(-93);
    states[89] = new State(-94);
    states[90] = new State(-80);
    states[91] = new State(new int[]{36,93,33,96,24,97,23,98,43,108,45,103,44,104,16,105,17,106},new int[]{-12,92,-15,91,-19,99});
    states[92] = new State(-81);
    states[93] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,94,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[94] = new State(new int[]{37,95});
    states[95] = new State(-82);
    states[96] = new State(-95);
    states[97] = new State(-96);
    states[98] = new State(-97);
    states[99] = new State(-83);
    states[100] = new State(new int[]{31,101,22,-84,20,-84,34,-84,35,-84,32,-84,33,-84,25,-84,26,-84,30,-84,29,-84,27,-84,28,-84,21,-84,19,-84,12,-84,7,-84,47,-84,37,-84});
    states[101] = new State(new int[]{36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,102,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[102] = new State(-54);
    states[103] = new State(-85);
    states[104] = new State(-86);
    states[105] = new State(-87);
    states[106] = new State(-88);
    states[107] = new State(-56);
    states[108] = new State(-84);
    states[109] = new State(new int[]{22,88,20,89,34,-73,35,-73,32,-73,33,-73,25,-73,26,-73,30,-73,29,-73,27,-73,28,-73,47,-73,21,-73,19,-73,12,-73,7,-73,37,-73},new int[]{-18,43});
    states[110] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,111,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[111] = new State(new int[]{37,112});
    states[112] = new State(new int[]{22,88,20,89,34,-74,35,-74,32,-74,33,-74,25,-74,26,-74,30,-74,29,-74,27,-74,28,-74,47,-74,21,-74,19,-74,12,-74,7,-74,37,-74},new int[]{-18,73});
    states[113] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,114,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[114] = new State(new int[]{37,115});
    states[115] = new State(new int[]{34,64,35,65,22,88,20,89,32,-68,33,-68,25,-68,26,-68,30,-68,29,-68,27,-68,28,-68,47,-68,21,-68,19,-68,12,-68,7,-68,37,-68},new int[]{-17,69,-18,73});
    states[116] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,117,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[117] = new State(new int[]{37,118});
    states[118] = new State(new int[]{32,57,33,58,34,64,35,65,22,88,20,89,25,-64,26,-64,30,-64,29,-64,27,-64,28,-64,47,-64,21,-64,19,-64,12,-64,7,-64,37,-64},new int[]{-14,62,-17,69,-18,73});
    states[119] = new State(new int[]{13,48,14,50,36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,120,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[120] = new State(new int[]{37,121});
    states[121] = new State(new int[]{25,79,26,80,30,81,29,82,27,83,28,84,32,57,33,58,34,64,35,65,22,88,20,89,47,-58,21,-58,19,-58,12,-58,7,-58,37,-58},new int[]{-16,55,-14,62,-17,69,-18,73});
    states[122] = new State(-100);
    states[123] = new State(-101);
    states[124] = new State(new int[]{47,13},new int[]{-24,125});
    states[125] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,126,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[126] = new State(-21);
    states[127] = new State(new int[]{31,128,22,-84,20,-84,34,-84,35,-84,32,-84,33,-84,25,-84,26,-84,30,-84,29,-84,27,-84,28,-84,47,-84,21,-84,19,-84});
    states[128] = new State(new int[]{36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,129,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[129] = new State(-53);
    states[130] = new State(new int[]{47,13,21,122,19,123},new int[]{-24,131,-13,35});
    states[131] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,132,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[132] = new State(-22);
    states[133] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,134,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[134] = new State(-23);
    states[135] = new State(new int[]{36,136});
    states[136] = new State(new int[]{36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,137,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[137] = new State(new int[]{37,138});
    states[138] = new State(new int[]{38,139,12,24,7,31,36,52,33,96,24,97,23,98,43,127,45,103,44,104,16,105,17,106,11,135,9,144,18,187},new int[]{-22,178,-30,179,-20,23,-29,30,-32,181,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-6,183,-21,185,-23,186});
    states[139] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,140,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[140] = new State(new int[]{39,141});
    states[141] = new State(-34);
    states[142] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,143,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[143] = new State(-24);
    states[144] = new State(new int[]{36,145});
    states[145] = new State(new int[]{36,52,33,96,24,97,23,98,43,100,45,103,44,104,16,105,17,106},new int[]{-7,146,-32,34,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-35,107});
    states[146] = new State(new int[]{37,147});
    states[147] = new State(new int[]{38,151,12,24,7,31,36,52,33,96,24,97,23,98,43,127,45,103,44,104,16,105,17,106,11,135,9,144,18,176},new int[]{-28,148,-30,168,-20,23,-29,30,-32,170,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-6,172,-21,174,-23,175});
    states[148] = new State(new int[]{10,149,12,-6,7,-6,43,-6,36,-6,33,-6,24,-6,23,-6,45,-6,44,-6,16,-6,17,-6,11,-6,9,-6,38,-6,2,-6,18,-6,39,-6});
    states[149] = new State(new int[]{38,151,12,24,7,31,36,52,33,96,24,97,23,98,43,127,45,103,44,104,16,105,17,106,11,135,9,144,18,176},new int[]{-28,150,-30,168,-20,23,-29,30,-32,170,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-6,172,-21,174,-23,175});
    states[150] = new State(-7);
    states[151] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,152,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[152] = new State(new int[]{39,153});
    states[153] = new State(-42);
    states[154] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,155,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[155] = new State(new int[]{39,156});
    states[156] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,157,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[157] = new State(-25);
    states[158] = new State(new int[]{41,167,47,13,12,-28,7,-28,43,-28,36,-28,33,-28,24,-28,23,-28,45,-28,44,-28,16,-28,17,-28,11,-28,9,-28,38,-28,2,-28,18,-28,39,-28},new int[]{-24,159,-34,165});
    states[159] = new State(-26,new int[]{-33,160});
    states[160] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,161,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[161] = new State(-27);
    states[162] = new State(new int[]{47,13},new int[]{-24,163});
    states[163] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,164,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[164] = new State(-31);
    states[165] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,166,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[166] = new State(-29);
    states[167] = new State(-30);
    states[168] = new State(new int[]{47,13},new int[]{-24,169});
    states[169] = new State(-43);
    states[170] = new State(new int[]{47,13,21,122,19,123},new int[]{-24,171,-13,35});
    states[171] = new State(-44);
    states[172] = new State(new int[]{47,13},new int[]{-24,173});
    states[173] = new State(-45);
    states[174] = new State(-46);
    states[175] = new State(-47);
    states[176] = new State(new int[]{47,13},new int[]{-24,177});
    states[177] = new State(-48);
    states[178] = new State(-35);
    states[179] = new State(new int[]{47,13},new int[]{-24,180});
    states[180] = new State(-36);
    states[181] = new State(new int[]{47,13,21,122,19,123},new int[]{-24,182,-13,35});
    states[182] = new State(-37);
    states[183] = new State(new int[]{47,13},new int[]{-24,184});
    states[184] = new State(-38);
    states[185] = new State(-39);
    states[186] = new State(-40);
    states[187] = new State(new int[]{47,13},new int[]{-24,188});
    states[188] = new State(-41);
    states[189] = new State(new int[]{12,24,7,31,43,127,36,52,33,96,24,97,23,98,45,103,44,104,16,105,17,106,11,135,9,144,38,154,2,158,18,162,39,-32},new int[]{-3,190,-30,18,-20,23,-29,30,-6,124,-32,130,-8,78,-9,85,-10,86,-11,87,-12,90,-15,91,-19,99,-21,133,-23,142});
    states[190] = new State(-20);
    states[191] = new State(-3);
    states[192] = new State(-4,new int[]{-27,193});
    states[193] = new State(new int[]{8,3,2,192},new int[]{-25,194});
    states[194] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-26, new int[]{-25,3});
    rules[2] = new Rule(-25, new int[]{8,38,-2,39,41});
    rules[3] = new Rule(-25, new int[]{8,41});
    rules[4] = new Rule(-27, new int[]{});
    rules[5] = new Rule(-25, new int[]{2,-27,-25});
    rules[6] = new Rule(-23, new int[]{9,36,-7,37,-28});
    rules[7] = new Rule(-23, new int[]{9,36,-7,37,-28,10,-28});
    rules[8] = new Rule(-24, new int[]{47});
    rules[9] = new Rule(-1, new int[]{43});
    rules[10] = new Rule(-1, new int[]{36,-1,37});
    rules[11] = new Rule(-20, new int[]{12,-1});
    rules[12] = new Rule(-29, new int[]{7,-7});
    rules[13] = new Rule(-29, new int[]{7,46});
    rules[14] = new Rule(-2, new int[]{-4,-2});
    rules[15] = new Rule(-2, new int[]{-3});
    rules[16] = new Rule(-30, new int[]{-20});
    rules[17] = new Rule(-30, new int[]{-29});
    rules[18] = new Rule(-31, new int[]{});
    rules[19] = new Rule(-3, new int[]{-30,-30,-31,-24,-3});
    rules[20] = new Rule(-3, new int[]{-30,-24,-3});
    rules[21] = new Rule(-3, new int[]{-6,-24,-3});
    rules[22] = new Rule(-3, new int[]{-32,-24,-3});
    rules[23] = new Rule(-3, new int[]{-21,-3});
    rules[24] = new Rule(-3, new int[]{-23,-3});
    rules[25] = new Rule(-3, new int[]{38,-3,39,-3});
    rules[26] = new Rule(-33, new int[]{});
    rules[27] = new Rule(-3, new int[]{2,-24,-33,-3});
    rules[28] = new Rule(-34, new int[]{});
    rules[29] = new Rule(-3, new int[]{2,-34,-3});
    rules[30] = new Rule(-3, new int[]{2,41});
    rules[31] = new Rule(-3, new int[]{18,-24,-3});
    rules[32] = new Rule(-3, new int[]{});
    rules[33] = new Rule(-3, new int[]{38,-3,39,-3});
    rules[34] = new Rule(-21, new int[]{11,36,-7,37,38,-3,39});
    rules[35] = new Rule(-21, new int[]{11,36,-7,37,-22});
    rules[36] = new Rule(-22, new int[]{-30,-24});
    rules[37] = new Rule(-22, new int[]{-32,-24});
    rules[38] = new Rule(-22, new int[]{-6,-24});
    rules[39] = new Rule(-22, new int[]{-21});
    rules[40] = new Rule(-22, new int[]{-23});
    rules[41] = new Rule(-22, new int[]{18,-24});
    rules[42] = new Rule(-28, new int[]{38,-3,39});
    rules[43] = new Rule(-28, new int[]{-30,-24});
    rules[44] = new Rule(-28, new int[]{-32,-24});
    rules[45] = new Rule(-28, new int[]{-6,-24});
    rules[46] = new Rule(-28, new int[]{-21});
    rules[47] = new Rule(-28, new int[]{-23});
    rules[48] = new Rule(-28, new int[]{18,-24});
    rules[49] = new Rule(-4, new int[]{-5,43,-24});
    rules[50] = new Rule(-5, new int[]{13});
    rules[51] = new Rule(-5, new int[]{14});
    rules[52] = new Rule(-5, new int[]{15});
    rules[53] = new Rule(-6, new int[]{43,31,-7});
    rules[54] = new Rule(-35, new int[]{43,31,-7});
    rules[55] = new Rule(-7, new int[]{-32});
    rules[56] = new Rule(-7, new int[]{-35});
    rules[57] = new Rule(-32, new int[]{-32,-13,-8});
    rules[58] = new Rule(-32, new int[]{-32,-13,36,-7,37});
    rules[59] = new Rule(-32, new int[]{36,-7,37});
    rules[60] = new Rule(-32, new int[]{-8});
    rules[61] = new Rule(-8, new int[]{-8,-16,-9});
    rules[62] = new Rule(-8, new int[]{36,-7,37,-16,-9});
    rules[63] = new Rule(-8, new int[]{36,-7,37,-16,36,-7,37});
    rules[64] = new Rule(-8, new int[]{-8,-16,36,-7,37});
    rules[65] = new Rule(-8, new int[]{-9});
    rules[66] = new Rule(-9, new int[]{-9,-14,-10});
    rules[67] = new Rule(-9, new int[]{36,-7,37,-14,-10});
    rules[68] = new Rule(-9, new int[]{-9,-14,36,-7,37});
    rules[69] = new Rule(-9, new int[]{36,-7,37,-14,36,-7,37});
    rules[70] = new Rule(-9, new int[]{-10});
    rules[71] = new Rule(-10, new int[]{-10,-17,-11});
    rules[72] = new Rule(-10, new int[]{36,-7,37,-17,36,-7,37});
    rules[73] = new Rule(-10, new int[]{36,-7,37,-17,-11});
    rules[74] = new Rule(-10, new int[]{-10,-17,36,-7,37});
    rules[75] = new Rule(-10, new int[]{-11});
    rules[76] = new Rule(-11, new int[]{-11,-18,-12});
    rules[77] = new Rule(-11, new int[]{36,-7,37,-18,-12});
    rules[78] = new Rule(-11, new int[]{-11,-18,36,-7,37});
    rules[79] = new Rule(-11, new int[]{36,-7,37,-18,36,-7,37});
    rules[80] = new Rule(-11, new int[]{-12});
    rules[81] = new Rule(-12, new int[]{-15,-12});
    rules[82] = new Rule(-12, new int[]{-15,36,-7,37});
    rules[83] = new Rule(-12, new int[]{-19});
    rules[84] = new Rule(-19, new int[]{43});
    rules[85] = new Rule(-19, new int[]{45});
    rules[86] = new Rule(-19, new int[]{44});
    rules[87] = new Rule(-19, new int[]{16});
    rules[88] = new Rule(-19, new int[]{17});
    rules[89] = new Rule(-14, new int[]{32});
    rules[90] = new Rule(-14, new int[]{33});
    rules[91] = new Rule(-17, new int[]{34});
    rules[92] = new Rule(-17, new int[]{35});
    rules[93] = new Rule(-18, new int[]{22});
    rules[94] = new Rule(-18, new int[]{20});
    rules[95] = new Rule(-15, new int[]{33});
    rules[96] = new Rule(-15, new int[]{24});
    rules[97] = new Rule(-15, new int[]{23});
    rules[98] = new Rule(-15, new int[]{36,13,37});
    rules[99] = new Rule(-15, new int[]{36,14,37});
    rules[100] = new Rule(-13, new int[]{21});
    rules[101] = new Rule(-13, new int[]{19});
    rules[102] = new Rule(-16, new int[]{25});
    rules[103] = new Rule(-16, new int[]{26});
    rules[104] = new Rule(-16, new int[]{30});
    rules[105] = new Rule(-16, new int[]{29});
    rules[106] = new Rule(-16, new int[]{27});
    rules[107] = new Rule(-16, new int[]{28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, OpenBracket, maincandeclare, CloseBracket, Eof
#line 17 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                                            {if(Compiler.stackTree.Count>0) Compiler.tree = Compiler.stackTree.Pop(); YYAccept();}
#line default
        break;
      case 3: // start -> Program, Eof
#line 18 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                {Console.WriteLine("Unexpected end of file");  ++Compiler.errors; YYAbort();}
#line default
        break;
      case 4: // Anon@1 -> /* empty */
#line 19 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
        {Console.WriteLine("Critical error while parsing");  ++Compiler.errors; YYAbort();}
#line default
        break;
      case 6: // if -> If, OpenPar, exp, ClosePar, ifbody
#line 21 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                    { var nodeI = new IfNode();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 7: // if -> If, OpenPar, exp, ClosePar, ifbody, Else, ifbody
#line 23 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                               { var nodeI =new IfElseNode();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 8: // semicol -> SemiCol
#line 26 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                  {Compiler.line=ValueStack[ValueStack.Depth-1].i_val;
			CurrentSemanticValue.i_val=ValueStack[ValueStack.Depth-1].i_val;}
#line default
        break;
      case 9: // identPar -> Ident
#line 29 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                {CurrentSemanticValue.type=ValueStack[ValueStack.Depth-1].val;}
#line default
        break;
      case 10: // identPar -> OpenPar, identPar, ClosePar
#line 30 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                             {CurrentSemanticValue.type =ValueStack[ValueStack.Depth-2].type;}
#line default
        break;
      case 11: // read -> Read, identPar
#line 32 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                    { 
					var nodeR = new ReadNode(ValueStack[ValueStack.Depth-1].type);
				    Compiler.stackTree.Push(nodeR);}
#line default
        break;
      case 12: // write -> Write, exp
#line 35 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                { var nodeW = new WriteNode();
				  if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
				  Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 13: // write -> Write, String
#line 39 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                 {
					var nodeS = new StringNode(ValueStack[ValueStack.Depth-1].val);
					var nodeW = new WriteNode();
					nodeW.right=nodeS;
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 14: // maincandeclare -> declare, maincandeclare
#line 46 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
     {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 15: // maincandeclare -> main
#line 50 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
        {}
#line default
        break;
      case 18: // Anon@2 -> /* empty */
#line 56 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                            {Console.WriteLine("Syntax error");  ++Compiler.errors;
               yyerrok();
                }
#line default
        break;
      case 20: // main -> expression, semicol, main
#line 60 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
    {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 21: // main -> assign, semicol, main
#line 64 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                       {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 22: // main -> exp1, semicol, main
#line 69 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                     {  
				    var node = new StandaloneExpNode();
				    Compiler.stackTree.Push(node);
				}
#line default
        break;
      case 23: // main -> while, main
#line 73 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
              {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 24: // main -> if, main
#line 77 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
            {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 25: // main -> OpenBracket, main, CloseBracket, main
#line 82 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
    {  
				    var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 26: // Anon@3 -> /* empty */
#line 86 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                  {Console.WriteLine("Error while parsing (syntax or lexical error): around line {0} ",Compiler.line);   ++Compiler.errors;
				yyerrok();
	            }
#line default
        break;
      case 28: // Anon@4 -> /* empty */
#line 89 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
         {Console.WriteLine("Error while parsing (syntax or lexical error) around line {0}",Compiler.line);   ++Compiler.errors;
				yyerrok();
              }
#line default
        break;
      case 30: // main -> error, Eof
#line 92 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {Console.WriteLine("Unexpected end of file");  ++Compiler.errors; YYAbort();}
#line default
        break;
      case 31: // main -> Return, semicol, main
#line 93 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                       { var nodeR = new ReturnNode();
					Compiler.stackTree.Push(nodeR);
					var nodeM = new MainNode();
				    Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 32: // main -> /* empty */
#line 97 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
    { var nodeM = new MainNode(true);
		 Compiler.stackTree.Push(nodeM);}
#line default
        break;
      case 34: // while -> While, OpenPar, exp, ClosePar, OpenBracket, main, CloseBracket
#line 102 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                                                {var nodeW = new WhileNode();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 35: // while -> While, OpenPar, exp, ClosePar, whilebody
#line 105 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                         {var nodeW = new WhileNode();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 41: // whilebody -> Return, semicol
#line 114 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                  { var nodeR = new ReturnNode();
		 Compiler.stackTree.Push(nodeR);}
#line default
        break;
      case 48: // ifbody -> Return, semicol
#line 123 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                  { var nodeR = new ReturnNode();
		Compiler.stackTree.Push(nodeR);}
#line default
        break;
      case 49: // declare -> vtype, Ident, semicol
#line 126 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                              {var node = new DeclarationNode(); 
						  node.varType=Compiler.GetValType(ValueStack[ValueStack.Depth-3].type); node.ident=ValueStack[ValueStack.Depth-2].val;
						  if(Compiler.variables.ContainsKey(ValueStack[ValueStack.Depth-2].val)) 
						  {	
							string s=ValueStack[ValueStack.Depth-2].val;
							Console.WriteLine("Semantic error. Variable {0} already declared. Error in line {1}",s,Compiler.line);
							++Compiler.errors;
						  }
						  else
							 Compiler.variables.Add(ValueStack[ValueStack.Depth-2].val,Compiler.GetValType(ValueStack[ValueStack.Depth-3].type));
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 50: // vtype -> Int
#line 138 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
           {CurrentSemanticValue.type="int";}
#line default
        break;
      case 51: // vtype -> Double
#line 139 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
          {CurrentSemanticValue.type="double";}
#line default
        break;
      case 52: // vtype -> Bool
#line 140 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
        {CurrentSemanticValue.type = "bool";}
#line default
        break;
      case 53: // assign -> Ident, Assign, exp
#line 142 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                          {var node = new AssignNode(ValueStack[ValueStack.Depth-3].val); 			
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 54: // assignMid -> Ident, Assign, exp
#line 145 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                             {var node = new AssignMidNode(ValueStack[ValueStack.Depth-3].val); 
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 57: // exp1 -> exp1, logicop, exp2
#line 151 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                         {var node = new LogicNode(); 			
					node.type = Compiler.GetLogicType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 58: // exp1 -> exp1, logicop, OpenPar, exp, ClosePar
#line 154 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                      {var node = new LogicNode(); 
					node.type = Compiler.GetLogicType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 61: // exp2 -> exp2, relatiop, exp3
#line 161 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
  {
		 var node = new RelationNode(); 
					node.type = Compiler.GetRelationType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 62: // exp2 -> OpenPar, exp, ClosePar, relatiop, exp3
#line 166 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
   {var node = new RelationNode(); 
					node.type = Compiler.GetRelationType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 63: // exp2 -> OpenPar, exp, ClosePar, relatiop, OpenPar, exp, ClosePar
#line 170 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
   {var node = new RelationNode(); 
					node.type = Compiler.GetRelationType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 64: // exp2 -> exp2, relatiop, OpenPar, exp, ClosePar
#line 174 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
   {var node = new RelationNode(); 
					node.type = Compiler.GetRelationType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 66: // exp3 -> exp3, addop, exp4
#line 179 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                      {var node = new AddNode(); 
					node.type = Compiler.GetAddType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 67: // exp3 -> OpenPar, exp, ClosePar, addop, exp4
#line 182 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                   {var node = new AddNode(); 
					node.type = Compiler.GetAddType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 68: // exp3 -> exp3, addop, OpenPar, exp, ClosePar
#line 185 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                   {var node = new AddNode(); 
					node.type = Compiler.GetAddType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 69: // exp3 -> OpenPar, exp, ClosePar, addop, OpenPar, exp, ClosePar
#line 189 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
     {var node = new AddNode(); 
					node.type = Compiler.GetAddType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 71: // exp4 -> exp4, mulop, exp5
#line 194 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                       {var node = new MulNode(); 
					node.type = Compiler.GetMulType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 72: // exp4 -> OpenPar, exp, ClosePar, mulop, OpenPar, exp, ClosePar
#line 197 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                                    {var node = new MulNode(); 
					node.type = Compiler.GetMulType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 73: // exp4 -> OpenPar, exp, ClosePar, mulop, exp5
#line 200 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                    {var node = new MulNode(); 
					node.type = Compiler.GetMulType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 74: // exp4 -> exp4, mulop, OpenPar, exp, ClosePar
#line 203 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                    {var node = new MulNode(); 
					node.type = Compiler.GetMulType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 76: // exp5 -> exp5, bitop, exp6
#line 208 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                       {var node = new BitNode(); 
					node.type = Compiler.GetBitType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 77: // exp5 -> OpenPar, exp, ClosePar, bitop, exp6
#line 211 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                     {var node = new BitNode(); 
					node.type = Compiler.GetBitType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 78: // exp5 -> exp5, bitop, OpenPar, exp, ClosePar
#line 214 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                      {var node = new BitNode(); 
					node.type = Compiler.GetBitType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 79: // exp5 -> OpenPar, exp, ClosePar, bitop, OpenPar, exp, ClosePar
#line 217 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                                                      {var node = new BitNode(); 
					node.type = Compiler.GetBitType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 81: // exp6 -> unary, exp6
#line 222 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                   {var node = new UnaryNode(); 
					node.type = Compiler.GetUnaryType(ValueStack[ValueStack.Depth-2].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 82: // exp6 -> unary, OpenPar, exp, ClosePar
#line 225 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                              {var node = new UnaryNode(); 
					node.type = Compiler.GetUnaryType(ValueStack[ValueStack.Depth-4].type);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 84: // term -> Ident
#line 230 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
            {var node = new IdentNode();
			node.ident = ValueStack[ValueStack.Depth-1].val;
			Compiler.stackTree.Push(node);}
#line default
        break;
      case 85: // term -> RealNumber
#line 233 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
              {var node = new DoubleNode();	
					node.value=Double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 86: // term -> IntNumber
#line 236 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {var node = new IntNode();
					node.value=Int32.Parse(ValueStack[ValueStack.Depth-1].val);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 87: // term -> True
#line 239 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
        {var node = new BoolNode();
					node.value=true;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 88: // term -> False
#line 242 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
         {var node = new BoolNode();
					node.value=false;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 89: // addop -> Plus
#line 246 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {CurrentSemanticValue.type="+";}
#line default
        break;
      case 90: // addop -> Minus
#line 247 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
          {CurrentSemanticValue.type="-";}
#line default
        break;
      case 91: // mulop -> Multiply
#line 249 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                 {CurrentSemanticValue.type="*";}
#line default
        break;
      case 92: // mulop -> Divide
#line 250 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
          {CurrentSemanticValue.type="/";}
#line default
        break;
      case 93: // bitop -> BitOr
#line 251 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {CurrentSemanticValue.type="|";}
#line default
        break;
      case 94: // bitop -> BitAnd
#line 252 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
            {CurrentSemanticValue.type="&";}
#line default
        break;
      case 95: // unary -> Minus
#line 254 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
              {CurrentSemanticValue.type="-";}
#line default
        break;
      case 96: // unary -> BitNegation
#line 255 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                {CurrentSemanticValue.type="~";}
#line default
        break;
      case 97: // unary -> Negation
#line 256 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {CurrentSemanticValue.type="!";}
#line default
        break;
      case 98: // unary -> OpenPar, Int, ClosePar
#line 257 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                         {CurrentSemanticValue.type="(int)";}
#line default
        break;
      case 99: // unary -> OpenPar, Double, ClosePar
#line 258 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                            {CurrentSemanticValue.type="(double)";}
#line default
        break;
      case 100: // logicop -> Or
#line 260 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {CurrentSemanticValue.type="||";}
#line default
        break;
      case 101: // logicop -> And
#line 261 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
        {CurrentSemanticValue.type="&&";}
#line default
        break;
      case 102: // relatiop -> Equal
#line 263 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                 {CurrentSemanticValue.type="==";}
#line default
        break;
      case 103: // relatiop -> NotEqual
#line 264 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
             {CurrentSemanticValue.type="!=";}
#line default
        break;
      case 104: // relatiop -> Greater
#line 265 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
           {CurrentSemanticValue.type=">";}
#line default
        break;
      case 105: // relatiop -> Smaller
#line 266 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
            {CurrentSemanticValue.type="<";}
#line default
        break;
      case 106: // relatiop -> GreaterOrEqual
#line 267 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                  {CurrentSemanticValue.type=">=";}
#line default
        break;
      case 107: // relatiop -> SmallerOrEqual
#line 268 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"
                   {CurrentSemanticValue.type="<=";}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 272 "C:\Users\przem\source\repos\Compilator\Compilator\kompilator.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
