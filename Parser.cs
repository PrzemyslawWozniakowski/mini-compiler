// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MOD8PJ2Q
// DateTime: 20.06.2020 22:13:24
// UserName: przem
// Input file <Parser.y - 20.06.2020 22:13:24>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Comment=4,DoubleConv=5,IntConv=6,
    Write=7,Program=8,If=9,Else=10,While=11,Read=12,
    Int=13,Double=14,Bool=15,True=16,False=17,Return=18,
    And=19,BitAnd=20,Or=21,BitOr=22,Negation=23,BitNegation=24,
    Equal=25,NotEqual=26,GreaterOrEqual=27,SmallerOrEqual=28,Smaller=29,Greater=30,
    Assign=31,Plus=32,Minus=33,Multiply=34,Divide=35,OpenPar=36,
    ClosePar=37,SemiCol=38,OpenBracket=39,CloseBracket=40,Endl=41,Eof=42,
    Error=43,Ident=44,IntNumber=45,RealNumber=46,String=47};

public struct ValueType
#line 4 "Parser.y"
{
public string  val;
public int i_val;
public double  d_val;
public string  type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[93];
  private static State[] states = new State[170];
  private static string[] nonTerms = new string[] {
      "maincandeclare", "main", "declare", "vtype", "assign", "exp", "exp2", 
      "exp3", "exp4", "exp5", "exp6", "logicop", "addop", "unary", "relatiop", 
      "mulop", "bitop", "term", "read", "while", "whilebody", "if", "start", 
      "$accept", "Anon@1", "ifbody", "expression", "write", "Anon@2", "Anon@3", 
      "Anon@4", };

  static Parser() {
    states[0] = new State(new int[]{8,3},new int[]{-23,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{39,4});
    states[4] = new State(new int[]{13,16,14,17,15,18,12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-1,5,-3,11,-4,13,-2,19,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[5] = new State(new int[]{40,6});
    states[6] = new State(new int[]{42,7});
    states[7] = new State(-2,new int[]{-25,8});
    states[8] = new State(new int[]{2,9});
    states[9] = new State(new int[]{42,10});
    states[10] = new State(-3);
    states[11] = new State(new int[]{13,16,14,17,15,18,12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-1,12,-3,11,-4,13,-2,19,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[12] = new State(-14);
    states[13] = new State(new int[]{44,14});
    states[14] = new State(new int[]{38,15});
    states[15] = new State(-36);
    states[16] = new State(-37);
    states[17] = new State(-38);
    states[18] = new State(-39);
    states[19] = new State(-15);
    states[20] = new State(new int[]{38,168,12,26,7,29,44,160},new int[]{-27,21,-19,25,-28,28,-5,123});
    states[21] = new State(-19,new int[]{-29,22});
    states[22] = new State(new int[]{38,23});
    states[23] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,24,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[24] = new State(-20);
    states[25] = new State(-16);
    states[26] = new State(new int[]{44,27});
    states[27] = new State(-10);
    states[28] = new State(-17);
    states[29] = new State(new int[]{36,31,47,122,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-6,30,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[30] = new State(-11);
    states[31] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,32,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[32] = new State(new int[]{37,33});
    states[33] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,119,19,120,38,-12,12,-12,7,-12,44,-12},new int[]{-17,34,-16,47,-13,59,-15,103,-12,114});
    states[34] = new State(new int[]{36,36,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-10,35,-11,78,-14,84,-18,94});
    states[35] = new State(-62);
    states[36] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,37,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[37] = new State(new int[]{37,38});
    states[38] = new State(new int[]{22,39,20,40,34,-64,35,-64,32,-64,33,-64,25,-64,26,-64,30,-64,29,-64,27,-64,28,-64,21,-64,19,-64,38,-64,12,-64,7,-64,44,-64,37,-64},new int[]{-17,34});
    states[39] = new State(-78);
    states[40] = new State(-79);
    states[41] = new State(new int[]{21,119,19,120,38,-45,12,-45,7,-45,44,-45,37,-45},new int[]{-12,42});
    states[42] = new State(new int[]{36,44,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-6,43,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[43] = new State(-41);
    states[44] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,45,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[45] = new State(new int[]{37,46});
    states[46] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,119,19,120,38,-44,12,-44,7,-44,44,-44,37,-44},new int[]{-17,34,-16,47,-13,59,-15,103,-12,114});
    states[47] = new State(new int[]{36,48,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-9,121,-10,72,-11,78,-14,84,-18,94});
    states[48] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,49,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[49] = new State(new int[]{37,50});
    states[50] = new State(new int[]{22,39,20,40,34,51,35,52,32,-57,33,-57,25,-57,26,-57,30,-57,29,-57,27,-57,28,-57,21,-57,19,-57,38,-57,12,-57,7,-57,44,-57,37,-57},new int[]{-17,34,-16,47});
    states[51] = new State(-76);
    states[52] = new State(-77);
    states[53] = new State(new int[]{25,108,26,109,30,110,29,111,27,112,28,113,21,-50,19,-50,38,-50,12,-50,7,-50,44,-50,37,-50},new int[]{-15,54});
    states[54] = new State(new int[]{36,56,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-7,55,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[55] = new State(-46);
    states[56] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,57,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[57] = new State(new int[]{37,58});
    states[58] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,-49,19,-49,38,-49,12,-49,7,-49,44,-49,37,-49},new int[]{-17,34,-16,47,-13,59,-15,103});
    states[59] = new State(new int[]{36,61,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-8,60,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[60] = new State(-52);
    states[61] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,62,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[62] = new State(new int[]{37,63});
    states[63] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,-54,26,-54,30,-54,29,-54,27,-54,28,-54,21,-54,19,-54,38,-54,12,-54,7,-54,44,-54,37,-54},new int[]{-17,34,-16,47,-13,59});
    states[64] = new State(-74);
    states[65] = new State(-75);
    states[66] = new State(new int[]{32,64,33,65,25,-55,26,-55,30,-55,29,-55,27,-55,28,-55,21,-55,19,-55,38,-55,12,-55,7,-55,44,-55,37,-55},new int[]{-13,67});
    states[67] = new State(new int[]{36,69,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-8,68,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[68] = new State(-51);
    states[69] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,70,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[70] = new State(new int[]{37,71});
    states[71] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,-53,26,-53,30,-53,29,-53,27,-53,28,-53,21,-53,19,-53,38,-53,12,-53,7,-53,44,-53,37,-53},new int[]{-17,34,-16,47,-13,59});
    states[72] = new State(new int[]{34,51,35,52,32,-60,33,-60,25,-60,26,-60,30,-60,29,-60,27,-60,28,-60,21,-60,19,-60,38,-60,12,-60,7,-60,44,-60,37,-60},new int[]{-16,73});
    states[73] = new State(new int[]{36,75,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-9,74,-10,72,-11,78,-14,84,-18,94});
    states[74] = new State(-56);
    states[75] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,76,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[76] = new State(new int[]{37,77});
    states[77] = new State(new int[]{22,39,20,40,34,51,35,52,32,-59,33,-59,25,-59,26,-59,30,-59,29,-59,27,-59,28,-59,21,-59,19,-59,38,-59,12,-59,7,-59,44,-59,37,-59},new int[]{-17,34,-16,47});
    states[78] = new State(new int[]{22,39,20,40,34,-65,35,-65,32,-65,33,-65,25,-65,26,-65,30,-65,29,-65,27,-65,28,-65,21,-65,19,-65,38,-65,12,-65,7,-65,44,-65,37,-65},new int[]{-17,79});
    states[79] = new State(new int[]{36,81,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-10,80,-11,78,-14,84,-18,94});
    states[80] = new State(-61);
    states[81] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,82,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[82] = new State(new int[]{37,83});
    states[83] = new State(new int[]{22,39,20,40,34,-63,35,-63,32,-63,33,-63,25,-63,26,-63,30,-63,29,-63,27,-63,28,-63,21,-63,19,-63,38,-63,12,-63,7,-63,44,-63,37,-63},new int[]{-17,34});
    states[84] = new State(new int[]{36,86,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-11,85,-14,84,-18,94});
    states[85] = new State(-66);
    states[86] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,87,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[87] = new State(new int[]{37,88});
    states[88] = new State(-67);
    states[89] = new State(-80);
    states[90] = new State(-81);
    states[91] = new State(-82);
    states[92] = new State(-83);
    states[93] = new State(-84);
    states[94] = new State(-68);
    states[95] = new State(-69);
    states[96] = new State(-70);
    states[97] = new State(-71);
    states[98] = new State(-72);
    states[99] = new State(-73);
    states[100] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,101,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[101] = new State(new int[]{37,102});
    states[102] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,119,19,120},new int[]{-17,34,-16,47,-13,59,-15,103,-12,114});
    states[103] = new State(new int[]{36,105,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-7,104,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[104] = new State(-47);
    states[105] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,106,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[106] = new State(new int[]{37,107});
    states[107] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,-48,19,-48,38,-48,12,-48,7,-48,44,-48,37,-48},new int[]{-17,34,-16,47,-13,59,-15,103});
    states[108] = new State(-87);
    states[109] = new State(-88);
    states[110] = new State(-89);
    states[111] = new State(-90);
    states[112] = new State(-91);
    states[113] = new State(-92);
    states[114] = new State(new int[]{36,116,33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99},new int[]{-6,115,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[115] = new State(-42);
    states[116] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,117,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[117] = new State(new int[]{37,118});
    states[118] = new State(new int[]{22,39,20,40,34,51,35,52,32,64,33,65,25,108,26,109,30,110,29,111,27,112,28,113,21,119,19,120,38,-43,12,-43,7,-43,44,-43,37,-43},new int[]{-17,34,-16,47,-13,59,-15,103,-12,114});
    states[119] = new State(-85);
    states[120] = new State(-86);
    states[121] = new State(-58);
    states[122] = new State(-13);
    states[123] = new State(-18);
    states[124] = new State(new int[]{31,125,22,-69,20,-69,34,-69,35,-69,32,-69,33,-69,25,-69,26,-69,30,-69,29,-69,27,-69,28,-69,21,-69,19,-69,38,-69});
    states[125] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,126,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[126] = new State(-40);
    states[127] = new State(new int[]{38,128});
    states[128] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,129,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[129] = new State(-22);
    states[130] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,131,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[131] = new State(-23);
    states[132] = new State(new int[]{36,133});
    states[133] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,134,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[134] = new State(new int[]{37,135});
    states[135] = new State(new int[]{39,136,12,26,7,29,44,160,11,132,9,141},new int[]{-21,163,-27,164,-19,25,-28,28,-5,123,-20,166,-22,167});
    states[136] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,137,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[137] = new State(new int[]{40,138});
    states[138] = new State(-31);
    states[139] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,140,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[140] = new State(-24);
    states[141] = new State(new int[]{36,142});
    states[142] = new State(new int[]{33,89,24,90,23,91,6,92,5,93,44,95,46,96,45,97,16,98,17,99,36,100},new int[]{-6,143,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94});
    states[143] = new State(new int[]{37,144});
    states[144] = new State(new int[]{39,148,12,26,7,29,44,160,11,132,9,141},new int[]{-26,145,-27,158,-19,25,-28,28,-5,123,-20,161,-22,162});
    states[145] = new State(new int[]{10,146,12,-4,7,-4,44,-4,33,-4,24,-4,23,-4,6,-4,5,-4,46,-4,45,-4,16,-4,17,-4,36,-4,11,-4,9,-4,2,-4,42,-4,40,-4});
    states[146] = new State(new int[]{39,148,12,26,7,29,44,160,11,132,9,141},new int[]{-26,147,-27,158,-19,25,-28,28,-5,123,-20,161,-22,162});
    states[147] = new State(-5);
    states[148] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,149,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[149] = new State(new int[]{40,150});
    states[150] = new State(-6);
    states[151] = new State(new int[]{38,152,12,-27,7,-27,44,-27,33,-27,24,-27,23,-27,6,-27,5,-27,46,-27,45,-27,16,-27,17,-27,36,-27,11,-27,9,-27,2,-27,42,-27,40,-27},new int[]{-31,156});
    states[152] = new State(-25,new int[]{-30,153});
    states[153] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,154,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[154] = new State(-26);
    states[155] = new State(-29);
    states[156] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,157,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[157] = new State(-28);
    states[158] = new State(new int[]{38,159});
    states[159] = new State(-7);
    states[160] = new State(new int[]{31,125});
    states[161] = new State(-8);
    states[162] = new State(-9);
    states[163] = new State(-32);
    states[164] = new State(new int[]{38,165});
    states[165] = new State(-33);
    states[166] = new State(-34);
    states[167] = new State(-35);
    states[168] = new State(new int[]{12,26,7,29,44,124,33,89,24,90,23,91,6,92,5,93,46,96,45,97,16,98,17,99,36,100,11,132,9,141,2,151,42,155,40,-30},new int[]{-2,169,-27,20,-19,25,-28,28,-5,123,-6,127,-7,41,-8,53,-9,66,-10,72,-11,78,-14,84,-18,94,-20,130,-22,139});
    states[169] = new State(-21);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-24, new int[]{-23,3});
    rules[2] = new Rule(-25, new int[]{});
    rules[3] = new Rule(-23, new int[]{8,39,-1,40,42,-25,2,42});
    rules[4] = new Rule(-22, new int[]{9,36,-6,37,-26});
    rules[5] = new Rule(-22, new int[]{9,36,-6,37,-26,10,-26});
    rules[6] = new Rule(-26, new int[]{39,-2,40});
    rules[7] = new Rule(-26, new int[]{-27,38});
    rules[8] = new Rule(-26, new int[]{-20});
    rules[9] = new Rule(-26, new int[]{-22});
    rules[10] = new Rule(-19, new int[]{12,44});
    rules[11] = new Rule(-28, new int[]{7,-6});
    rules[12] = new Rule(-28, new int[]{7,36,-6,37});
    rules[13] = new Rule(-28, new int[]{7,47});
    rules[14] = new Rule(-1, new int[]{-3,-1});
    rules[15] = new Rule(-1, new int[]{-2});
    rules[16] = new Rule(-27, new int[]{-19});
    rules[17] = new Rule(-27, new int[]{-28});
    rules[18] = new Rule(-27, new int[]{-5});
    rules[19] = new Rule(-29, new int[]{});
    rules[20] = new Rule(-2, new int[]{-27,-27,-29,38,-2});
    rules[21] = new Rule(-2, new int[]{-27,38,-2});
    rules[22] = new Rule(-2, new int[]{-6,38,-2});
    rules[23] = new Rule(-2, new int[]{-20,-2});
    rules[24] = new Rule(-2, new int[]{-22,-2});
    rules[25] = new Rule(-30, new int[]{});
    rules[26] = new Rule(-2, new int[]{2,38,-30,-2});
    rules[27] = new Rule(-31, new int[]{});
    rules[28] = new Rule(-2, new int[]{2,-31,-2});
    rules[29] = new Rule(-2, new int[]{42});
    rules[30] = new Rule(-2, new int[]{});
    rules[31] = new Rule(-20, new int[]{11,36,-6,37,39,-2,40});
    rules[32] = new Rule(-20, new int[]{11,36,-6,37,-21});
    rules[33] = new Rule(-21, new int[]{-27,38});
    rules[34] = new Rule(-21, new int[]{-20});
    rules[35] = new Rule(-21, new int[]{-22});
    rules[36] = new Rule(-3, new int[]{-4,44,38});
    rules[37] = new Rule(-4, new int[]{13});
    rules[38] = new Rule(-4, new int[]{14});
    rules[39] = new Rule(-4, new int[]{15});
    rules[40] = new Rule(-5, new int[]{44,31,-6});
    rules[41] = new Rule(-6, new int[]{-7,-12,-6});
    rules[42] = new Rule(-6, new int[]{36,-6,37,-12,-6});
    rules[43] = new Rule(-6, new int[]{36,-6,37,-12,36,-6,37});
    rules[44] = new Rule(-6, new int[]{-7,-12,36,-6,37});
    rules[45] = new Rule(-6, new int[]{-7});
    rules[46] = new Rule(-7, new int[]{-8,-15,-7});
    rules[47] = new Rule(-7, new int[]{36,-6,37,-15,-7});
    rules[48] = new Rule(-7, new int[]{36,-6,37,-15,36,-6,37});
    rules[49] = new Rule(-7, new int[]{-8,-15,36,-6,37});
    rules[50] = new Rule(-7, new int[]{-8});
    rules[51] = new Rule(-8, new int[]{-9,-13,-8});
    rules[52] = new Rule(-8, new int[]{36,-6,37,-13,-8});
    rules[53] = new Rule(-8, new int[]{-9,-13,36,-6,37});
    rules[54] = new Rule(-8, new int[]{36,-6,37,-13,36,-6,37});
    rules[55] = new Rule(-8, new int[]{-9});
    rules[56] = new Rule(-9, new int[]{-10,-16,-9});
    rules[57] = new Rule(-9, new int[]{36,-6,37,-16,36,-6,37});
    rules[58] = new Rule(-9, new int[]{36,-6,37,-16,-9});
    rules[59] = new Rule(-9, new int[]{-10,-16,36,-6,37});
    rules[60] = new Rule(-9, new int[]{-10});
    rules[61] = new Rule(-10, new int[]{-11,-17,-10});
    rules[62] = new Rule(-10, new int[]{36,-6,37,-17,-10});
    rules[63] = new Rule(-10, new int[]{-11,-17,36,-6,37});
    rules[64] = new Rule(-10, new int[]{36,-6,37,-17,36,-6,37});
    rules[65] = new Rule(-10, new int[]{-11});
    rules[66] = new Rule(-11, new int[]{-14,-11});
    rules[67] = new Rule(-11, new int[]{-14,36,-6,37});
    rules[68] = new Rule(-11, new int[]{-18});
    rules[69] = new Rule(-18, new int[]{44});
    rules[70] = new Rule(-18, new int[]{46});
    rules[71] = new Rule(-18, new int[]{45});
    rules[72] = new Rule(-18, new int[]{16});
    rules[73] = new Rule(-18, new int[]{17});
    rules[74] = new Rule(-13, new int[]{32});
    rules[75] = new Rule(-13, new int[]{33});
    rules[76] = new Rule(-16, new int[]{34});
    rules[77] = new Rule(-16, new int[]{35});
    rules[78] = new Rule(-17, new int[]{22});
    rules[79] = new Rule(-17, new int[]{20});
    rules[80] = new Rule(-14, new int[]{33});
    rules[81] = new Rule(-14, new int[]{24});
    rules[82] = new Rule(-14, new int[]{23});
    rules[83] = new Rule(-14, new int[]{6});
    rules[84] = new Rule(-14, new int[]{5});
    rules[85] = new Rule(-12, new int[]{21});
    rules[86] = new Rule(-12, new int[]{19});
    rules[87] = new Rule(-15, new int[]{25});
    rules[88] = new Rule(-15, new int[]{26});
    rules[89] = new Rule(-15, new int[]{30});
    rules[90] = new Rule(-15, new int[]{29});
    rules[91] = new Rule(-15, new int[]{27});
    rules[92] = new Rule(-15, new int[]{28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 18 "Parser.y"
                                                            { Compiler.tree = Compiler.stackTree.Pop();}
#line default
        break;
      case 4: // if -> If, OpenPar, exp, ClosePar, ifbody
#line 21 "Parser.y"
                                    { var nodeI = new IfNode();
					if(Compiler.stackTree.Count>0) nodeI.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeI.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 5: // if -> If, OpenPar, exp, ClosePar, ifbody, Else, ifbody
#line 25 "Parser.y"
                                               { var nodeI =new IfElseNode();
					if(Compiler.stackTree.Count>0) nodeI.elseNode = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeI.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeI.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeI);}
#line default
        break;
      case 10: // read -> Read, Ident
#line 36 "Parser.y"
                  { var nodeR = new WriteNode();
					if(Compiler.stackTree.Count>0) nodeR.right = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeR);}
#line default
        break;
      case 11: // write -> Write, exp
#line 40 "Parser.y"
                { var nodeW = new WriteNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 12: // write -> Write, OpenPar, exp, ClosePar
#line 43 "Parser.y"
                              { Console.WriteLine("write");var nodeW = new WriteNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 13: // write -> Write, String
#line 46 "Parser.y"
                {
					var nodeS = new StringNode();
					nodeS.value = ValueStack[ValueStack.Depth-1].val;
					var nodeW = new WriteNode();
					nodeW.right=nodeS;
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 14: // maincandeclare -> declare, maincandeclare
#line 54 "Parser.y"
     {  
				    var nodeM = new MainNode();
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 15: // maincandeclare -> main
#line 60 "Parser.y"
        {}
#line default
        break;
      case 19: // Anon@2 -> /* empty */
#line 67 "Parser.y"
                            {Console.WriteLine("Syntax error");  ++Compiler.errors;
               yyerrok();
                }
#line default
        break;
      case 21: // main -> expression, SemiCol, main
#line 71 "Parser.y"
    {  
				    var nodeM = new MainNode();
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 22: // main -> exp, SemiCol, main
#line 77 "Parser.y"
                    {  
				    var nodeM = new MainNode();
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 23: // main -> while, main
#line 83 "Parser.y"
              {  
				    var nodeM = new MainNode();
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 24: // main -> if, main
#line 89 "Parser.y"
            {  
				    var nodeM = new MainNode();
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 25: // Anon@3 -> /* empty */
#line 95 "Parser.y"
                  {Console.WriteLine("Error: in line {0}", ValueStack[ValueStack.Depth-2].i_val);   ++Compiler.errors;
               yyerrok();
              }
#line default
        break;
      case 27: // Anon@4 -> /* empty */
#line 98 "Parser.y"
         {Console.WriteLine("Error: in line {0}", ValueStack[ValueStack.Depth-1].i_val);   ++Compiler.errors;
               yyerrok();
              }
#line default
        break;
      case 29: // main -> Eof
#line 101 "Parser.y"
       {Console.WriteLine("Error");}
#line default
        break;
      case 30: // main -> /* empty */
#line 102 "Parser.y"
    { var nodeM = new MainNode();
		 Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 31: // while -> While, OpenPar, exp, ClosePar, OpenBracket, main, CloseBracket
#line 106 "Parser.y"
                                                                {var nodeW = new WhileNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeW.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 32: // while -> While, OpenPar, exp, ClosePar, whilebody
#line 111 "Parser.y"
                                         {var nodeW = new WhileNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) nodeW.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(nodeW);
					}
#line default
        break;
      case 36: // declare -> vtype, Ident, SemiCol
#line 121 "Parser.y"
                              {var node = new DeclarationNode(); 
						  node.varType=ValueStack[ValueStack.Depth-3].type; node.ident=ValueStack[ValueStack.Depth-2].val;
						  if(Compiler.variables.ContainsKey(ValueStack[ValueStack.Depth-2].val)) 
						  {	
							string s=ValueStack[ValueStack.Depth-2].val;
							Console.WriteLine("Semantic error. Variable {0} already declared.",s);
							++Compiler.errors;
						  }
						  else
							 Compiler.variables.Add(ValueStack[ValueStack.Depth-2].val,ValueStack[ValueStack.Depth-3].type);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 37: // vtype -> Int
#line 133 "Parser.y"
           {CurrentSemanticValue.type="int";}
#line default
        break;
      case 38: // vtype -> Double
#line 134 "Parser.y"
          {CurrentSemanticValue.type="double";}
#line default
        break;
      case 39: // vtype -> Bool
#line 135 "Parser.y"
        {CurrentSemanticValue.type = "bool";}
#line default
        break;
      case 40: // assign -> Ident, Assign, exp
#line 137 "Parser.y"
                          {var node = new AssignNode(); 
						   node.ident=ValueStack[ValueStack.Depth-3].val;
						   	if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 41: // exp -> exp2, logicop, exp
#line 143 "Parser.y"
                       {var node = new LogicNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 42: // exp -> OpenPar, exp, ClosePar, logicop, exp
#line 148 "Parser.y"
                                      {var node = new LogicNode(); 
					  if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 43: // exp -> OpenPar, exp, ClosePar, logicop, OpenPar, exp, ClosePar
#line 154 "Parser.y"
     {var node = new LogicNode(); 
					if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 44: // exp -> exp2, logicop, OpenPar, exp, ClosePar
#line 160 "Parser.y"
     {var node = new LogicNode(); 
					  if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 46: // exp2 -> exp3, relatiop, exp2
#line 168 "Parser.y"
  {
		 var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 47: // exp2 -> OpenPar, exp, ClosePar, relatiop, exp2
#line 175 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 48: // exp2 -> OpenPar, exp, ClosePar, relatiop, OpenPar, exp, ClosePar
#line 181 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 49: // exp2 -> exp3, relatiop, OpenPar, exp, ClosePar
#line 187 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 51: // exp3 -> exp4, addop, exp3
#line 194 "Parser.y"
                      {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 52: // exp3 -> OpenPar, exp, ClosePar, addop, exp3
#line 199 "Parser.y"
                                   {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 53: // exp3 -> exp4, addop, OpenPar, exp, ClosePar
#line 204 "Parser.y"
                                   {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 54: // exp3 -> OpenPar, exp, ClosePar, addop, OpenPar, exp, ClosePar
#line 210 "Parser.y"
     {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 56: // exp4 -> exp5, mulop, exp4
#line 217 "Parser.y"
                       {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 57: // exp4 -> OpenPar, exp, ClosePar, mulop, OpenPar, exp, ClosePar
#line 222 "Parser.y"
                                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 58: // exp4 -> OpenPar, exp, ClosePar, mulop, exp4
#line 227 "Parser.y"
                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 59: // exp4 -> exp5, mulop, OpenPar, exp, ClosePar
#line 232 "Parser.y"
                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 61: // exp5 -> exp6, bitop, exp5
#line 239 "Parser.y"
                       {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 62: // exp5 -> OpenPar, exp, ClosePar, bitop, exp5
#line 244 "Parser.y"
                                     {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 63: // exp5 -> exp6, bitop, OpenPar, exp, ClosePar
#line 249 "Parser.y"
                                      {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 64: // exp5 -> OpenPar, exp, ClosePar, bitop, OpenPar, exp, ClosePar
#line 254 "Parser.y"
                                                      {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						node.type = ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 66: // exp6 -> unary, exp6
#line 261 "Parser.y"
                   {var node = new UnaryNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					node.type=ValueStack[ValueStack.Depth-2].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 67: // exp6 -> unary, OpenPar, exp, ClosePar
#line 265 "Parser.y"
                              {var node = new UnaryNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					node.type=ValueStack[ValueStack.Depth-4].type;
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 69: // term -> Ident
#line 271 "Parser.y"
            {var node = new IdentNode();
			node.ident = ValueStack[ValueStack.Depth-1].val;
			Compiler.stackTree.Push(node);}
#line default
        break;
      case 70: // term -> RealNumber
#line 274 "Parser.y"
              {var node = new DoubleNode();
					node.value=Double.Parse(ValueStack[ValueStack.Depth-1].val);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 71: // term -> IntNumber
#line 277 "Parser.y"
             {var node = new IntNode();
					node.value=Int32.Parse(ValueStack[ValueStack.Depth-1].val);
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 72: // term -> True
#line 280 "Parser.y"
        {var node = new BoolNode();
					node.value=true;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 73: // term -> False
#line 283 "Parser.y"
         {var node = new BoolNode();
					node.value=false;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 74: // addop -> Plus
#line 287 "Parser.y"
             {CurrentSemanticValue.type="+";}
#line default
        break;
      case 75: // addop -> Minus
#line 288 "Parser.y"
          {CurrentSemanticValue.type="-";}
#line default
        break;
      case 76: // mulop -> Multiply
#line 290 "Parser.y"
                 {CurrentSemanticValue.type="*";}
#line default
        break;
      case 77: // mulop -> Divide
#line 292 "Parser.y"
          {CurrentSemanticValue.type="/";}
#line default
        break;
      case 78: // bitop -> BitOr
#line 293 "Parser.y"
             {CurrentSemanticValue.type="||";}
#line default
        break;
      case 79: // bitop -> BitAnd
#line 294 "Parser.y"
            {CurrentSemanticValue.type="&&";}
#line default
        break;
      case 80: // unary -> Minus
#line 296 "Parser.y"
              {CurrentSemanticValue.type="-";}
#line default
        break;
      case 81: // unary -> BitNegation
#line 297 "Parser.y"
                {CurrentSemanticValue.type="~";}
#line default
        break;
      case 82: // unary -> Negation
#line 298 "Parser.y"
             {CurrentSemanticValue.type="!";}
#line default
        break;
      case 83: // unary -> IntConv
#line 299 "Parser.y"
            {CurrentSemanticValue.type="(int)";}
#line default
        break;
      case 84: // unary -> DoubleConv
#line 300 "Parser.y"
               {CurrentSemanticValue.type="(double)";}
#line default
        break;
      case 87: // relatiop -> Equal
#line 305 "Parser.y"
                 {CurrentSemanticValue.type="==";}
#line default
        break;
      case 88: // relatiop -> NotEqual
#line 306 "Parser.y"
             {CurrentSemanticValue.type="!=";}
#line default
        break;
      case 89: // relatiop -> Greater
#line 307 "Parser.y"
           {CurrentSemanticValue.type=">";}
#line default
        break;
      case 90: // relatiop -> Smaller
#line 308 "Parser.y"
            {CurrentSemanticValue.type="<";}
#line default
        break;
      case 91: // relatiop -> GreaterOrEqual
#line 309 "Parser.y"
                  {CurrentSemanticValue.type=">=";}
#line default
        break;
      case 92: // relatiop -> SmallerOrEqual
#line 310 "Parser.y"
                   {CurrentSemanticValue.type="<=";}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 314 "Parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
