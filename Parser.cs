// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MOD8PJ2Q
// DateTime: 19.06.2020 00:24:24
// UserName: przem
// Input file <Parser.y - 18.06.2020 23:56:25>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Comment=4,DoubleConv=5,IntConv=6,
    Write=7,Program=8,If=9,Else=10,While=11,Read=12,
    Int=13,Double=14,Bool=15,True=16,False=17,Return=18,
    And=19,BitAnd=20,Or=21,BitOr=22,Negation=23,BitNegation=24,
    Equal=25,NotEqual=26,GreaterOrEqual=27,SmallerOrEqual=28,Smaller=29,Greater=30,
    Assign=31,Plus=32,Minus=33,Multiply=34,Divide=35,OpenPar=36,
    ClosePar=37,SemiCol=38,OpenBracket=39,CloseBracket=40,Endl=41,Eof=42,
    Error=43,Ident=44,IntNumber=45,RealNumber=46,String=47};

public struct ValueType
#line 4 "Parser.y"
{
public string  val;
public int i_val;
public double  d_val;
public string  type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[101];
  private static State[] states = new State[185];
  private static string[] nonTerms = new string[] {
      "maincandeclare", "main", "declare", "vtype", "assign", "exp", "exp2", 
      "exp3", "exp4", "exp5", "exp6", "logicop", "addop", "unary", "relatiop", 
      "mulop", "bitop", "term", "read", "while", "whilebody", "if", "start", 
      "$accept", "Anon@1", "ifbody", "write", "expression", "Anon@2", "Anon@3", 
      "Anon@4", "Anon@5", };

  static Parser() {
    states[0] = new State(new int[]{8,3},new int[]{-23,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{39,4});
    states[4] = new State(new int[]{13,16,14,17,15,18,44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-1,5,-3,11,-4,13,-2,19,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[5] = new State(new int[]{40,6});
    states[6] = new State(new int[]{42,7});
    states[7] = new State(-2,new int[]{-25,8});
    states[8] = new State(new int[]{2,9});
    states[9] = new State(new int[]{42,10});
    states[10] = new State(-3);
    states[11] = new State(new int[]{13,16,14,17,15,18,44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-1,12,-3,11,-4,13,-2,19,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[12] = new State(-17);
    states[13] = new State(new int[]{44,14});
    states[14] = new State(new int[]{38,15});
    states[15] = new State(-44);
    states[16] = new State(-45);
    states[17] = new State(-46);
    states[18] = new State(-47);
    states[19] = new State(-18);
    states[20] = new State(new int[]{38,182,44,184,12,118,7,121},new int[]{-28,21,-5,25,-19,117,-27,120});
    states[21] = new State(-22,new int[]{-29,22});
    states[22] = new State(new int[]{38,23});
    states[23] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,24,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[24] = new State(-23);
    states[25] = new State(-19);
    states[26] = new State(new int[]{31,27,22,-77,20,-77,34,-77,35,-77,32,-77,33,-77,25,-77,26,-77,30,-77,29,-77,27,-77,28,-77,21,-77,19,-77,38,-77});
    states[27] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,28,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[28] = new State(-48);
    states[29] = new State(new int[]{21,114,19,115,38,-53,44,-53,12,-53,7,-53,37,-53},new int[]{-12,30});
    states[30] = new State(new int[]{36,32,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-6,31,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[31] = new State(-49);
    states[32] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,33,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[33] = new State(new int[]{37,34});
    states[34] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,114,19,115,38,-52,44,-52,12,-52,7,-52,37,-52},new int[]{-17,35,-16,48,-13,60,-15,98,-12,109});
    states[35] = new State(new int[]{36,37,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-10,36,-11,73,-14,79,-18,89});
    states[36] = new State(-70);
    states[37] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,38,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[38] = new State(new int[]{37,39});
    states[39] = new State(new int[]{22,40,20,41,34,-72,35,-72,32,-72,33,-72,25,-72,26,-72,30,-72,29,-72,27,-72,28,-72,21,-72,19,-72,38,-72,44,-72,12,-72,7,-72,37,-72},new int[]{-17,35});
    states[40] = new State(-86);
    states[41] = new State(-87);
    states[42] = new State(new int[]{25,103,26,104,30,105,29,106,27,107,28,108,21,-58,19,-58,38,-58,44,-58,12,-58,7,-58,37,-58},new int[]{-15,43});
    states[43] = new State(new int[]{36,45,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-7,44,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[44] = new State(-54);
    states[45] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,46,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[46] = new State(new int[]{37,47});
    states[47] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,-57,19,-57,38,-57,44,-57,12,-57,7,-57,37,-57},new int[]{-17,35,-16,48,-13,60,-15,98});
    states[48] = new State(new int[]{36,49,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-9,116,-10,67,-11,73,-14,79,-18,89});
    states[49] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,50,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[50] = new State(new int[]{37,51});
    states[51] = new State(new int[]{22,40,20,41,34,52,35,53,32,-65,33,-65,25,-65,26,-65,30,-65,29,-65,27,-65,28,-65,21,-65,19,-65,38,-65,44,-65,12,-65,7,-65,37,-65},new int[]{-17,35,-16,48});
    states[52] = new State(-84);
    states[53] = new State(-85);
    states[54] = new State(new int[]{32,65,33,66,25,-63,26,-63,30,-63,29,-63,27,-63,28,-63,21,-63,19,-63,38,-63,44,-63,12,-63,7,-63,37,-63},new int[]{-13,55});
    states[55] = new State(new int[]{36,57,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-8,56,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[56] = new State(-59);
    states[57] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,58,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[58] = new State(new int[]{37,59});
    states[59] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,-61,26,-61,30,-61,29,-61,27,-61,28,-61,21,-61,19,-61,38,-61,44,-61,12,-61,7,-61,37,-61},new int[]{-17,35,-16,48,-13,60});
    states[60] = new State(new int[]{36,62,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-8,61,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[61] = new State(-60);
    states[62] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,63,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[63] = new State(new int[]{37,64});
    states[64] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,-62,26,-62,30,-62,29,-62,27,-62,28,-62,21,-62,19,-62,38,-62,44,-62,12,-62,7,-62,37,-62},new int[]{-17,35,-16,48,-13,60});
    states[65] = new State(-82);
    states[66] = new State(-83);
    states[67] = new State(new int[]{34,52,35,53,32,-68,33,-68,25,-68,26,-68,30,-68,29,-68,27,-68,28,-68,21,-68,19,-68,38,-68,44,-68,12,-68,7,-68,37,-68},new int[]{-16,68});
    states[68] = new State(new int[]{36,70,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-9,69,-10,67,-11,73,-14,79,-18,89});
    states[69] = new State(-64);
    states[70] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,71,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[71] = new State(new int[]{37,72});
    states[72] = new State(new int[]{22,40,20,41,34,52,35,53,32,-67,33,-67,25,-67,26,-67,30,-67,29,-67,27,-67,28,-67,21,-67,19,-67,38,-67,44,-67,12,-67,7,-67,37,-67},new int[]{-17,35,-16,48});
    states[73] = new State(new int[]{22,40,20,41,34,-73,35,-73,32,-73,33,-73,25,-73,26,-73,30,-73,29,-73,27,-73,28,-73,21,-73,19,-73,38,-73,44,-73,12,-73,7,-73,37,-73},new int[]{-17,74});
    states[74] = new State(new int[]{36,76,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-10,75,-11,73,-14,79,-18,89});
    states[75] = new State(-69);
    states[76] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,77,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[77] = new State(new int[]{37,78});
    states[78] = new State(new int[]{22,40,20,41,34,-71,35,-71,32,-71,33,-71,25,-71,26,-71,30,-71,29,-71,27,-71,28,-71,21,-71,19,-71,38,-71,44,-71,12,-71,7,-71,37,-71},new int[]{-17,35});
    states[79] = new State(new int[]{36,81,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-11,80,-14,79,-18,89});
    states[80] = new State(-74);
    states[81] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,82,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[82] = new State(new int[]{37,83});
    states[83] = new State(-75);
    states[84] = new State(-88);
    states[85] = new State(-89);
    states[86] = new State(-90);
    states[87] = new State(-91);
    states[88] = new State(-92);
    states[89] = new State(-76);
    states[90] = new State(-77);
    states[91] = new State(-78);
    states[92] = new State(-79);
    states[93] = new State(-80);
    states[94] = new State(-81);
    states[95] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,96,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[96] = new State(new int[]{37,97});
    states[97] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,114,19,115},new int[]{-17,35,-16,48,-13,60,-15,98,-12,109});
    states[98] = new State(new int[]{36,100,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-7,99,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[99] = new State(-55);
    states[100] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,101,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[101] = new State(new int[]{37,102});
    states[102] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,-56,19,-56,38,-56,44,-56,12,-56,7,-56,37,-56},new int[]{-17,35,-16,48,-13,60,-15,98});
    states[103] = new State(-95);
    states[104] = new State(-96);
    states[105] = new State(-97);
    states[106] = new State(-98);
    states[107] = new State(-99);
    states[108] = new State(-100);
    states[109] = new State(new int[]{36,111,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-6,110,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[110] = new State(-50);
    states[111] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,112,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[112] = new State(new int[]{37,113});
    states[113] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,114,19,115,38,-51,44,-51,12,-51,7,-51,37,-51},new int[]{-17,35,-16,48,-13,60,-15,98,-12,109});
    states[114] = new State(-93);
    states[115] = new State(-94);
    states[116] = new State(-66);
    states[117] = new State(-20);
    states[118] = new State(new int[]{44,119});
    states[119] = new State(-13);
    states[120] = new State(-21);
    states[121] = new State(new int[]{36,123,47,126,33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94},new int[]{-6,122,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[122] = new State(-14);
    states[123] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,124,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[124] = new State(new int[]{37,125});
    states[125] = new State(new int[]{22,40,20,41,34,52,35,53,32,65,33,66,25,103,26,104,30,105,29,106,27,107,28,108,21,114,19,115,38,-15,44,-15,12,-15,7,-15},new int[]{-17,35,-16,48,-13,60,-15,98,-12,109});
    states[126] = new State(-16);
    states[127] = new State(new int[]{38,128});
    states[128] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,129,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[129] = new State(-25);
    states[130] = new State(-26,new int[]{-30,131});
    states[131] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,132,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[132] = new State(-27);
    states[133] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,134,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[134] = new State(-28);
    states[135] = new State(new int[]{36,136});
    states[136] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,137,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[137] = new State(new int[]{37,138});
    states[138] = new State(new int[]{39,139,44,26,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,11,135,9,144,12,118,7,121},new int[]{-21,171,-5,172,-6,174,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,176,-22,177,-19,178,-27,180});
    states[139] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,140,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[140] = new State(new int[]{40,141});
    states[141] = new State(-36);
    states[142] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,143,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[143] = new State(-29);
    states[144] = new State(new int[]{36,145});
    states[145] = new State(new int[]{33,84,24,85,23,86,6,87,5,88,44,90,46,91,45,92,16,93,17,94,36,95},new int[]{-6,146,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89});
    states[146] = new State(new int[]{37,147});
    states[147] = new State(new int[]{39,151,44,26,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,11,135,9,144,12,118,7,121},new int[]{-26,148,-5,161,-6,163,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,165,-22,166,-19,167,-27,169});
    states[148] = new State(new int[]{10,149,44,-4,12,-4,7,-4,33,-4,24,-4,23,-4,6,-4,5,-4,46,-4,45,-4,16,-4,17,-4,36,-4,4,-4,11,-4,9,-4,2,-4,42,-4,40,-4});
    states[149] = new State(new int[]{39,151,44,26,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,11,135,9,144,12,118,7,121},new int[]{-26,150,-5,161,-6,163,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,165,-22,166,-19,167,-27,169});
    states[150] = new State(-5);
    states[151] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,152,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[152] = new State(new int[]{40,153});
    states[153] = new State(-6);
    states[154] = new State(new int[]{38,155,44,-32,12,-32,7,-32,33,-32,24,-32,23,-32,6,-32,5,-32,46,-32,45,-32,16,-32,17,-32,36,-32,4,-32,11,-32,9,-32,2,-32,42,-32,40,-32},new int[]{-32,159});
    states[155] = new State(-30,new int[]{-31,156});
    states[156] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,157,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[157] = new State(-31);
    states[158] = new State(-34);
    states[159] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,160,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[160] = new State(-33);
    states[161] = new State(new int[]{38,162});
    states[162] = new State(-7);
    states[163] = new State(new int[]{38,164});
    states[164] = new State(-8);
    states[165] = new State(-9);
    states[166] = new State(-10);
    states[167] = new State(new int[]{38,168});
    states[168] = new State(-11);
    states[169] = new State(new int[]{38,170});
    states[170] = new State(-12);
    states[171] = new State(-37);
    states[172] = new State(new int[]{38,173});
    states[173] = new State(-38);
    states[174] = new State(new int[]{38,175});
    states[175] = new State(-39);
    states[176] = new State(-40);
    states[177] = new State(-41);
    states[178] = new State(new int[]{38,179});
    states[179] = new State(-42);
    states[180] = new State(new int[]{38,181});
    states[181] = new State(-43);
    states[182] = new State(new int[]{44,26,12,118,7,121,33,84,24,85,23,86,6,87,5,88,46,91,45,92,16,93,17,94,36,95,4,130,11,135,9,144,2,154,42,158,40,-35},new int[]{-2,183,-28,20,-5,25,-19,117,-27,120,-6,127,-7,29,-8,42,-9,54,-10,67,-11,73,-14,79,-18,89,-20,133,-22,142});
    states[183] = new State(-24);
    states[184] = new State(new int[]{31,27});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-24, new int[]{-23,3});
    rules[2] = new Rule(-25, new int[]{});
    rules[3] = new Rule(-23, new int[]{8,39,-1,40,42,-25,2,42});
    rules[4] = new Rule(-22, new int[]{9,36,-6,37,-26});
    rules[5] = new Rule(-22, new int[]{9,36,-6,37,-26,10,-26});
    rules[6] = new Rule(-26, new int[]{39,-2,40});
    rules[7] = new Rule(-26, new int[]{-5,38});
    rules[8] = new Rule(-26, new int[]{-6,38});
    rules[9] = new Rule(-26, new int[]{-20});
    rules[10] = new Rule(-26, new int[]{-22});
    rules[11] = new Rule(-26, new int[]{-19,38});
    rules[12] = new Rule(-26, new int[]{-27,38});
    rules[13] = new Rule(-19, new int[]{12,44});
    rules[14] = new Rule(-27, new int[]{7,-6});
    rules[15] = new Rule(-27, new int[]{7,36,-6,37});
    rules[16] = new Rule(-27, new int[]{7,47});
    rules[17] = new Rule(-1, new int[]{-3,-1});
    rules[18] = new Rule(-1, new int[]{-2});
    rules[19] = new Rule(-28, new int[]{-5});
    rules[20] = new Rule(-28, new int[]{-19});
    rules[21] = new Rule(-28, new int[]{-27});
    rules[22] = new Rule(-29, new int[]{});
    rules[23] = new Rule(-2, new int[]{-28,-28,-29,38,-2});
    rules[24] = new Rule(-2, new int[]{-28,38,-2});
    rules[25] = new Rule(-2, new int[]{-6,38,-2});
    rules[26] = new Rule(-30, new int[]{});
    rules[27] = new Rule(-2, new int[]{4,-30,-2});
    rules[28] = new Rule(-2, new int[]{-20,-2});
    rules[29] = new Rule(-2, new int[]{-22,-2});
    rules[30] = new Rule(-31, new int[]{});
    rules[31] = new Rule(-2, new int[]{2,38,-31,-2});
    rules[32] = new Rule(-32, new int[]{});
    rules[33] = new Rule(-2, new int[]{2,-32,-2});
    rules[34] = new Rule(-2, new int[]{42});
    rules[35] = new Rule(-2, new int[]{});
    rules[36] = new Rule(-20, new int[]{11,36,-6,37,39,-2,40});
    rules[37] = new Rule(-20, new int[]{11,36,-6,37,-21});
    rules[38] = new Rule(-21, new int[]{-5,38});
    rules[39] = new Rule(-21, new int[]{-6,38});
    rules[40] = new Rule(-21, new int[]{-20});
    rules[41] = new Rule(-21, new int[]{-22});
    rules[42] = new Rule(-21, new int[]{-19,38});
    rules[43] = new Rule(-21, new int[]{-27,38});
    rules[44] = new Rule(-3, new int[]{-4,44,38});
    rules[45] = new Rule(-4, new int[]{13});
    rules[46] = new Rule(-4, new int[]{14});
    rules[47] = new Rule(-4, new int[]{15});
    rules[48] = new Rule(-5, new int[]{44,31,-6});
    rules[49] = new Rule(-6, new int[]{-7,-12,-6});
    rules[50] = new Rule(-6, new int[]{36,-6,37,-12,-6});
    rules[51] = new Rule(-6, new int[]{36,-6,37,-12,36,-6,37});
    rules[52] = new Rule(-6, new int[]{-7,-12,36,-6,37});
    rules[53] = new Rule(-6, new int[]{-7});
    rules[54] = new Rule(-7, new int[]{-8,-15,-7});
    rules[55] = new Rule(-7, new int[]{36,-6,37,-15,-7});
    rules[56] = new Rule(-7, new int[]{36,-6,37,-15,36,-6,37});
    rules[57] = new Rule(-7, new int[]{-8,-15,36,-6,37});
    rules[58] = new Rule(-7, new int[]{-8});
    rules[59] = new Rule(-8, new int[]{-9,-13,-8});
    rules[60] = new Rule(-8, new int[]{36,-6,37,-13,-8});
    rules[61] = new Rule(-8, new int[]{-9,-13,36,-6,37});
    rules[62] = new Rule(-8, new int[]{36,-6,37,-13,36,-6,37});
    rules[63] = new Rule(-8, new int[]{-9});
    rules[64] = new Rule(-9, new int[]{-10,-16,-9});
    rules[65] = new Rule(-9, new int[]{36,-6,37,-16,36,-6,37});
    rules[66] = new Rule(-9, new int[]{36,-6,37,-16,-9});
    rules[67] = new Rule(-9, new int[]{-10,-16,36,-6,37});
    rules[68] = new Rule(-9, new int[]{-10});
    rules[69] = new Rule(-10, new int[]{-11,-17,-10});
    rules[70] = new Rule(-10, new int[]{36,-6,37,-17,-10});
    rules[71] = new Rule(-10, new int[]{-11,-17,36,-6,37});
    rules[72] = new Rule(-10, new int[]{36,-6,37,-17,36,-6,37});
    rules[73] = new Rule(-10, new int[]{-11});
    rules[74] = new Rule(-11, new int[]{-14,-11});
    rules[75] = new Rule(-11, new int[]{-14,36,-6,37});
    rules[76] = new Rule(-11, new int[]{-18});
    rules[77] = new Rule(-18, new int[]{44});
    rules[78] = new Rule(-18, new int[]{46});
    rules[79] = new Rule(-18, new int[]{45});
    rules[80] = new Rule(-18, new int[]{16});
    rules[81] = new Rule(-18, new int[]{17});
    rules[82] = new Rule(-13, new int[]{32});
    rules[83] = new Rule(-13, new int[]{33});
    rules[84] = new Rule(-16, new int[]{34});
    rules[85] = new Rule(-16, new int[]{35});
    rules[86] = new Rule(-17, new int[]{22});
    rules[87] = new Rule(-17, new int[]{20});
    rules[88] = new Rule(-14, new int[]{33});
    rules[89] = new Rule(-14, new int[]{24});
    rules[90] = new Rule(-14, new int[]{23});
    rules[91] = new Rule(-14, new int[]{6});
    rules[92] = new Rule(-14, new int[]{5});
    rules[93] = new Rule(-12, new int[]{21});
    rules[94] = new Rule(-12, new int[]{19});
    rules[95] = new Rule(-15, new int[]{25});
    rules[96] = new Rule(-15, new int[]{26});
    rules[97] = new Rule(-15, new int[]{30});
    rules[98] = new Rule(-15, new int[]{29});
    rules[99] = new Rule(-15, new int[]{27});
    rules[100] = new Rule(-15, new int[]{28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 18 "Parser.y"
                                                            {Console.WriteLine("It's a program PogChamp");
	Console.WriteLine("{0}",Compiler.stackTree.Count); Compiler.tree = Compiler.stackTree.Pop();}
#line default
        break;
      case 4: // if -> If, OpenPar, exp, ClosePar, ifbody
#line 22 "Parser.y"
                                    {Console.WriteLine("If");}
#line default
        break;
      case 5: // if -> If, OpenPar, exp, ClosePar, ifbody, Else, ifbody
#line 23 "Parser.y"
                                               {Console.WriteLine("If with else");}
#line default
        break;
      case 6: // ifbody -> OpenBracket, main, CloseBracket
#line 25 "Parser.y"
                                      {Console.WriteLine("Long if body - exp");}
#line default
        break;
      case 7: // ifbody -> assign, SemiCol
#line 26 "Parser.y"
                  {Console.WriteLine("Single operation if body - assign");}
#line default
        break;
      case 8: // ifbody -> exp, SemiCol
#line 27 "Parser.y"
               {Console.WriteLine("Single operation if body - exp");}
#line default
        break;
      case 9: // ifbody -> while
#line 28 "Parser.y"
         {Console.WriteLine("Single operation if body - while");}
#line default
        break;
      case 10: // ifbody -> if
#line 29 "Parser.y"
      {Console.WriteLine("Single operation if body - if");}
#line default
        break;
      case 11: // ifbody -> read, SemiCol
#line 30 "Parser.y"
                {Console.WriteLine("Single operation if body - read");}
#line default
        break;
      case 12: // ifbody -> write, SemiCol
#line 31 "Parser.y"
                 {Console.WriteLine("Single operation if body - write");}
#line default
        break;
      case 13: // read -> Read, Ident
#line 33 "Parser.y"
                  {Console.WriteLine("read ident");}
#line default
        break;
      case 14: // write -> Write, exp
#line 35 "Parser.y"
                { Console.WriteLine("write");var nodeW = new WriteNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
					    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 15: // write -> Write, OpenPar, exp, ClosePar
#line 38 "Parser.y"
                              { Console.WriteLine("write");var nodeW = new WriteNode();
					if(Compiler.stackTree.Count>0) nodeW.right = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 16: // write -> Write, String
#line 41 "Parser.y"
                {Console.WriteLine("write");
					var nodeS = new StringNode();
					nodeS.value = ValueStack[ValueStack.Depth-1].val;
					var nodeW = new WriteNode();
					nodeW.right=nodeS;
				    Compiler.stackTree.Push(nodeW);}
#line default
        break;
      case 17: // maincandeclare -> declare, maincandeclare
#line 49 "Parser.y"
     {  
				    var nodeM = new MainNode();
					Console.WriteLine("{0}",Compiler.stackTree.Count);
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 18: // maincandeclare -> main
#line 56 "Parser.y"
        {}
#line default
        break;
      case 22: // Anon@2 -> /* empty */
#line 63 "Parser.y"
                            {Console.WriteLine("Syntax error");  ++Compiler.errors;
               yyerrok();
                }
#line default
        break;
      case 24: // main -> expression, SemiCol, main
#line 67 "Parser.y"
    {  
				    var nodeM = new MainNode();
					Console.WriteLine("{0}",Compiler.stackTree.Count);
					if(Compiler.stackTree.Count>0) nodeM.right = Compiler.stackTree.Pop();
				    if(Compiler.stackTree.Count>0) nodeM.left = Compiler.stackTree.Pop();
				    Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 26: // Anon@3 -> /* empty */
#line 75 "Parser.y"
           {Console.WriteLine("It's a comment");}
#line default
        break;
      case 30: // Anon@4 -> /* empty */
#line 78 "Parser.y"
                  {Console.WriteLine("Error: in line {0}", ValueStack[ValueStack.Depth-2].i_val);   ++Compiler.errors;
               yyerrok();
              }
#line default
        break;
      case 32: // Anon@5 -> /* empty */
#line 81 "Parser.y"
         {Console.WriteLine("Error: in line {0}", ValueStack[ValueStack.Depth-1].i_val);   ++Compiler.errors;
               yyerrok();
              }
#line default
        break;
      case 34: // main -> Eof
#line 84 "Parser.y"
       {Console.WriteLine("Error");}
#line default
        break;
      case 35: // main -> /* empty */
#line 85 "Parser.y"
    { var nodeM = new MainNode();
		 Compiler.stackTree.Push(nodeM);
				}
#line default
        break;
      case 36: // while -> While, OpenPar, exp, ClosePar, OpenBracket, main, CloseBracket
#line 89 "Parser.y"
                                                                {Console.WriteLine("While long");}
#line default
        break;
      case 37: // while -> While, OpenPar, exp, ClosePar, whilebody
#line 90 "Parser.y"
                                        {Console.WriteLine("While short");}
#line default
        break;
      case 38: // whilebody -> assign, SemiCol
#line 92 "Parser.y"
                          {Console.WriteLine("Single operation while body - assign");}
#line default
        break;
      case 39: // whilebody -> exp, SemiCol
#line 93 "Parser.y"
               {Console.WriteLine("Single operation while body - exp");}
#line default
        break;
      case 40: // whilebody -> while
#line 94 "Parser.y"
         {Console.WriteLine("Single operation while body - while");}
#line default
        break;
      case 41: // whilebody -> if
#line 95 "Parser.y"
      {Console.WriteLine("Single operation while body - if");}
#line default
        break;
      case 42: // whilebody -> read, SemiCol
#line 96 "Parser.y"
                {Console.WriteLine("Single operation while body - read");}
#line default
        break;
      case 43: // whilebody -> write, SemiCol
#line 97 "Parser.y"
                 {Console.WriteLine("Single operation while body - write");}
#line default
        break;
      case 44: // declare -> vtype, Ident, SemiCol
#line 99 "Parser.y"
                              {var node = new DeclarationNode(); 
						  node.varType=ValueStack[ValueStack.Depth-3].type; node.ident=ValueStack[ValueStack.Depth-2].val;
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 45: // vtype -> Int
#line 103 "Parser.y"
           {Console.WriteLine("Int");}
#line default
        break;
      case 46: // vtype -> Double
#line 104 "Parser.y"
          {Console.WriteLine("Double");}
#line default
        break;
      case 48: // assign -> Ident, Assign, exp
#line 107 "Parser.y"
                          {var node = new AssignNode(); 
						   node.ident=ValueStack[ValueStack.Depth-3].val;
						   	if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 49: // exp -> exp2, logicop, exp
#line 113 "Parser.y"
                       {var node = new LogicNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 50: // exp -> OpenPar, exp, ClosePar, logicop, exp
#line 117 "Parser.y"
                                      {var node = new LogicNode(); 
					  if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 51: // exp -> OpenPar, exp, ClosePar, logicop, OpenPar, exp, ClosePar
#line 122 "Parser.y"
     {var node = new LogicNode(); 
				  if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 52: // exp -> exp2, logicop, OpenPar, exp, ClosePar
#line 127 "Parser.y"
     {var node = new LogicNode(); 
					  if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 54: // exp2 -> exp3, relatiop, exp2
#line 134 "Parser.y"
   {Console.WriteLine("relatiop");
		 var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 55: // exp2 -> OpenPar, exp, ClosePar, relatiop, exp2
#line 140 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 56: // exp2 -> OpenPar, exp, ClosePar, relatiop, OpenPar, exp, ClosePar
#line 145 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 57: // exp2 -> exp3, relatiop, OpenPar, exp, ClosePar
#line 150 "Parser.y"
   {var node = new RelationNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 59: // exp3 -> exp4, addop, exp3
#line 156 "Parser.y"
                      {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 60: // exp3 -> OpenPar, exp, ClosePar, addop, exp3
#line 160 "Parser.y"
                                   {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 61: // exp3 -> exp4, addop, OpenPar, exp, ClosePar
#line 164 "Parser.y"
                                   {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 62: // exp3 -> OpenPar, exp, ClosePar, addop, OpenPar, exp, ClosePar
#line 169 "Parser.y"
     {var node = new AddNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 64: // exp4 -> exp5, mulop, exp4
#line 175 "Parser.y"
                       {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 65: // exp4 -> OpenPar, exp, ClosePar, mulop, OpenPar, exp, ClosePar
#line 179 "Parser.y"
                                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 66: // exp4 -> OpenPar, exp, ClosePar, mulop, exp4
#line 183 "Parser.y"
                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 67: // exp4 -> exp5, mulop, OpenPar, exp, ClosePar
#line 187 "Parser.y"
                                    {var node = new MulNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 69: // exp5 -> exp6, bitop, exp5
#line 193 "Parser.y"
                       {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 70: // exp5 -> OpenPar, exp, ClosePar, bitop, exp5
#line 197 "Parser.y"
                                     {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 71: // exp5 -> exp6, bitop, OpenPar, exp, ClosePar
#line 201 "Parser.y"
                                      {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 72: // exp5 -> OpenPar, exp, ClosePar, bitop, OpenPar, exp, ClosePar
#line 205 "Parser.y"
                                                      {var node = new BitNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					if(Compiler.stackTree.Count>0) node.right = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 74: // exp6 -> unary, exp6
#line 211 "Parser.y"
                   {var node = new UnaryNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 75: // exp6 -> unary, OpenPar, exp, ClosePar
#line 214 "Parser.y"
                              {var node = new UnaryNode(); 
				    if(Compiler.stackTree.Count>0) node.left = Compiler.stackTree.Pop();
					Compiler.stackTree.Push(node);}
#line default
        break;
      case 76: // exp6 -> term
#line 217 "Parser.y"
         {//Console.WriteLine("Ident");
	}
#line default
        break;
      case 77: // term -> Ident
#line 220 "Parser.y"
            {var node = new IdentNode();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 78: // term -> RealNumber
#line 222 "Parser.y"
              {var node = new IdentNode();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 79: // term -> IntNumber
#line 224 "Parser.y"
             {var node = new IdentNode();
						  Compiler.stackTree.Push(node);}
#line default
        break;
      case 80: // term -> True
#line 226 "Parser.y"
        {Console.WriteLine(" true");}
#line default
        break;
      case 81: // term -> False
#line 227 "Parser.y"
         {Console.WriteLine(" false");}
#line default
        break;
      case 82: // addop -> Plus
#line 229 "Parser.y"
             {//Console.WriteLine("Adding");
	}
#line default
        break;
      case 83: // addop -> Minus
#line 231 "Parser.y"
          {//Console.WriteLine("Minus");
	}
#line default
        break;
      case 84: // mulop -> Multiply
#line 234 "Parser.y"
                 {//Console.WriteLine("Multiply");
	}
#line default
        break;
      case 86: // bitop -> BitOr
#line 238 "Parser.y"
             {//Console.WriteLine("Bit Or");
	}
#line default
        break;
      case 87: // bitop -> BitAnd
#line 240 "Parser.y"
           {//Console.WriteLine("Bit And");
	}
#line default
        break;
      case 88: // unary -> Minus
#line 243 "Parser.y"
              {//Console.WriteLine("Unary minus");
	}
#line default
        break;
      case 89: // unary -> BitNegation
#line 245 "Parser.y"
                {//Console.WriteLine("unary bit negation");
	}
#line default
        break;
      case 90: // unary -> Negation
#line 247 "Parser.y"
             {//Console.WriteLine("unary negation");
	}
#line default
        break;
      case 91: // unary -> IntConv
#line 249 "Parser.y"
            {//Console.WriteLine("conv to int");
	}
#line default
        break;
      case 92: // unary -> DoubleConv
#line 251 "Parser.y"
               {//Console.WriteLine("conv to bool");
	}
#line default
        break;
      case 93: // logicop -> Or
#line 254 "Parser.y"
            {//Console.WriteLine("Or");
	}
#line default
        break;
      case 94: // logicop -> And
#line 256 "Parser.y"
       {//Console.WriteLine("And");
	}
#line default
        break;
      case 95: // relatiop -> Equal
#line 259 "Parser.y"
                {//Console.WriteLine("Equal");
	}
#line default
        break;
      case 96: // relatiop -> NotEqual
#line 261 "Parser.y"
            {//Console.WriteLine("NotEqual");
	}
#line default
        break;
      case 97: // relatiop -> Greater
#line 263 "Parser.y"
           {//Console.WriteLine("Greater");
	}
#line default
        break;
      case 98: // relatiop -> Smaller
#line 265 "Parser.y"
           {//Console.WriteLine("Smaller");
	}
#line default
        break;
      case 99: // relatiop -> GreaterOrEqual
#line 267 "Parser.y"
                  {//Console.WriteLine("GreaterOrEqual");
	}
#line default
        break;
      case 100: // relatiop -> SmallerOrEqual
#line 269 "Parser.y"
                  {//Console.WriteLine("SmallerOrEqual");
	}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 274 "Parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
